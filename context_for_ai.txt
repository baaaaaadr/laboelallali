# Laboratoire El Allali PWA - AI Context - 05/20/2025 20:44:14

## --- PROJECT OVERVIEW ---
Laboratoire El Allali - Medical laboratory website in Agadir, Morocco
Built with Next.js App Router, TypeScript, Tailwind CSS, i18n (fr, ar), and Firebase Hosting

## --- CORE CONFIGURATION ---

## FILE: package.json
```json
{
  "name": "laboelallali",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "prebuild": "node scripts/copy-sw.js",
    "build": "next build",
    "postbuild": "next-sitemap",
    "start": "next start",
    "lint": "next lint",
    "deploy": "npm run build && firebase deploy",
    "deploy:hosting": "npm run build && firebase deploy --only hosting",
    "deploy:functions": "firebase deploy --only functions",
    "context": "powershell -ExecutionPolicy Bypass -NoProfile -File ./generate_context.ps1",
    "tailwind:build": "tailwindcss -i ./src/app/globals.css -o ./output.css --content \"./src/**/*.{js,ts,jsx,tsx,mdx}\"",
    "git": "git add . && git commit -m \"update\" && git push"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.2",
    "@hookform/resolvers": "^5.0.1",
    "accept-language": "^3.0.20",
    "date-fns": "^4.1.0",
    "firebase": "^11.6.1",
    "firebase-admin": "^12.0.0",
    "i18next": "^25.1.2",
    "i18next-resources-to-backend": "^1.2.1",
    "leaflet": "^1.9.4",
    "lucide-react": "^0.507.0",
    "next": "15.3.1",
    "next-i18next": "^15.4.2",
    "next-pwa": "^5.6.0",
    "react": "^19.0.0",
    "react-datepicker": "^8.3.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.56.2",
    "react-i18next": "^15.5.1",
    "react-icons": "^5.5.0",
    "react-leaflet": "^5.0.0",
    "yup": "^1.6.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4.1.5",
    "@types/leaflet": "^1.9.18",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.21",
    "critters": "^0.0.23",
    "css-loader": "^7.1.2",
    "eslint": "^9",
    "eslint-config-next": "15.3.1",
    "fs-extra": "^11.2.0",
    "next-sitemap": "^4.2.3",
    "playwright": "^1.52.0",
    "postcss": "^8.5.3",
    "postcss-import": "^16.1.0",
    "postcss-loader": "^8.1.1",
    "postcss-nested": "^7.0.2",
    "postcss-nesting": "^13.0.1",
    "postcss-preset-env": "^10.1.6",
    "style-loader": "^4.0.0",
    "tailwindcss": "^4.1.5",
    "typescript": "^5"
  }
}

```

## FILE: next.config.js
```javascript
/** @type {import('next').NextConfig} */
const withPWA = require('next-pwa')({
  dest: 'public',
  disable: process.env.NODE_ENV === 'development' && process.env.NEXT_PUBLIC_ENABLE_PWA_DEV !== 'true',
  register: true,
  skipWaiting: true,
  runtimeCaching: [
    {
      urlPattern: /^https?.*/,
      handler: 'NetworkFirst',
      options: {
        cacheName: 'offlineCache',
        expiration: {
          maxEntries: 200,
        },
      },
    },
  ],
  buildExcludes: [/middleware-manifest\.json$/]
});

const nextConfig = {
  reactStrictMode: true,
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  experimental: {
    optimizeCss: true,
    scrollRestoration: true,
  },
  env: {
    NEXT_PUBLIC_ENABLE_PWA_DEV: process.env.NEXT_PUBLIC_ENABLE_PWA_DEV,
    NEXT_PUBLIC_APP_NAME: process.env.NEXT_PUBLIC_APP_NAME,
    NEXT_PUBLIC_DEFAULT_LOCALE: process.env.NEXT_PUBLIC_DEFAULT_LOCALE,
    NEXT_PUBLIC_API_URL: process.env.NEXT_PUBLIC_API_URL,
    NEXT_PUBLIC_FIREBASE_API_KEY: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
    NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
    NEXT_PUBLIC_FIREBASE_PROJECT_ID: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
    NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
    NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
    NEXT_PUBLIC_FIREBASE_APP_ID: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
    NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,
  },
  images: {
    domains: ['firebasestorage.googleapis.com', 'labo-el-allali-pwa.firebasestorage.app'],
    minimumCacheTTL: 60,
    formats: ['image/avif', 'image/webp'],
  },
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'X-Frame-Options',
            value: 'SAMEORIGIN',
          },
          {
            key: 'X-XSS-Protection',
            value: '1; mode=block',
          },
        ],
      },
    ];
  },
  webpack(config, { isServer, dev }) {
    // Fixes npm packages that depend on `fs` module
    if (!isServer) {
      config.resolve.fallback = {
        ...config.resolve.fallback,
        fs: false,
      };
    }

    // Handle CSS modules
    const cssRules = [
      {
        // Apply to both .module.css and regular .css files
        test: /\.css$/i,
        use: [
          'style-loader',
          {
            loader: 'css-loader',
            options: {
              importLoaders: 1,
              modules: {
                auto: true, // Auto-enable CSS modules for files ending in .module.css
                localIdentName: dev 
                  ? '[path][name]__[local]--[hash:base64:5]' 
                  : '[hash:base64]',
              },
            },
          },
          'postcss-loader',
        ],
      },
      // Fix for Leaflet marker icons
      {
        test: /\.(png|jpg|jpeg|gif|svg)$/i,
        type: 'asset/resource',
      },
    ];

    // Add the rules to the config
    config.module.rules.push(...cssRules);

    // Important: return the modified config
    return config;
  },
};

module.exports = withPWA(nextConfig);
```

## FILE: tailwind.config.js
```javascript
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
      "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
      "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
    ],
    theme: {
      extend: {
        // Note: Avec Tailwind v4, ces couleurs personnalisÃ©es peuvent ne pas fonctionner
        // comme prÃ©vu. On utilisera des notations directes dans le code.
      },
    },
    plugins: [],
  }
```

## FILE: tsconfig.json
```json
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

```

## FILE: firebase.json
```json
{
  "hosting": {
    "source": ".",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "frameworksBackend": {
      "region": "europe-west1"
    }
  },
  "firestore": {
    "rules": "firestore.rules",
    "indexes": "firestore.indexes.json"
  },
  "storage": {
    "rules": "storage.rules"
  }
}
```

## FILE: .firebaserc
```
{
  "projects": {
    "default": "labo-el-allali-pwa"
  }
}

```

## FILE: firestore.rules
```
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allow public read access to the analysisCatalog collection
    match /analysisCatalog/{analysisId} {
      allow read: if true; // Anyone can read
      allow write: if false; // No one can write directly from the client
    }

    // Default deny for anything not explicitly allowed
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
```

## FILE: storage.rules
```
rules_version = '2';

// Craft rules based on data in your Firestore database
// allow write: if firestore.get(
//    /databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin;
service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}

```

## FILE: i18n.ts
```typescript
// i18n.ts
import type { InitOptions } from 'i18next';

export const fallbackLng = 'fr';
export const supportedLngs = ['fr', 'ar'];
export const defaultNS = 'common';
// Nom de cookie spÃ©cifique Ã  l'application pour Ã©viter les conflits
export const cookieName = 'laboelallali-i18next-lng';

const i18nConfig: InitOptions = {
  // DÃ©commentez pour le dÃ©bogage en dÃ©veloppement :
  // debug: process.env.NODE_ENV === 'development',
  supportedLngs: supportedLngs,
  fallbackLng: fallbackLng,
  // La langue (lng) sera gÃ©nÃ©ralement dÃ©tectÃ©e (par le middleware via cookie/header, ou depuis le segment [lang] de l'URL).
  // La dÃ©finir statiquement ici pourrait interfÃ©rer avec la dÃ©tection.
  defaultNS: defaultNS,
  ns: [defaultNS], // i18next attend un tableau de chaÃ®nes ou une seule chaÃ®ne pour 'ns'.
  // Configuration du backend pour charger les fichiers de traduction.
  // Ce chemin est utilisÃ© par des backends comme i18next-http-backend (cÃ´tÃ© client)
  // ou i18next-fs-backend (cÃ´tÃ© serveur, ou pendant le build).
  // Pour l'App Router avec `output: 'export'`, les traductions dans `public/locales`
  // sont servies statiquement. `resourcesToBackend` est souvent une bonne approche
  // pour charger ces fichiers JSON dynamiquement.
  backend: {
    loadPath: '/locales/{{lng}}/{{ns}}.json',
  },
  // Options spÃ©cifiques Ã  React (passÃ©es lors de l'initialisation avec initReactI18next)
  react: {
    // `useSuspense: false` est souvent recommandÃ© pour l'App Router avec next-i18next
    // pour Ã©viter la complexitÃ© liÃ©e au rendu serveur/client et Suspense.
    useSuspense: false,
  },
};

export default i18nConfig;

```

## FILE: README.md
```markdown
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

```

## --- I18N SETUP ---

## FILE: src/middleware.ts
```typescript
// src/middleware.ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import acceptLanguage from 'accept-language';
import { fallbackLng, supportedLngs, cookieName } from '../i18n'; // Ajustez le chemin si nÃ©cessaire

acceptLanguage.languages(supportedLngs);

export const config = {
  matcher: [
    // Appliquer uniquement aux chemins qui n'incluent PAS dÃ©jÃ  une locale supportÃ©e,
    // qui ne sont pas des chemins pour des assets statiques ou l'API Next.js,
    // et qui ne ressemblent pas Ã  des chemins de fichiers avec une extension.
    // Exclure manifest.json car on le gÃ¨re sÃ©parÃ©ment
    '/((?!api|_next/static|_next/image|images|assets|favicon.ico|sw.js|locales|manifest.json|(?:[^/]+/)*?[^/]+\.\w+).*)'
  ],
};

// Fonction pour gÃ©rer les requÃªtes vers manifest.json
function handleManifestRequest(req: NextRequest) {
  const url = req.nextUrl.clone();
  // Si la requÃªte est pour /fr/manifest.json, on la redirige vers /manifest.json
  if (url.pathname.endsWith('/manifest.json')) {
    url.pathname = '/manifest.json';
    return NextResponse.rewrite(url);
  }
  return null;
}

export function middleware(req: NextRequest) {
  const pathname = req.nextUrl.pathname;
  let lng: string | undefined | null = null;

  // GÃ©rer les requÃªtes vers manifest.json
  if (pathname.endsWith('/manifest.json')) {
    return handleManifestRequest(req);
  }

  // VÃ©rifier si le chemin actuel contient dÃ©jÃ  une locale supportÃ©e
  const pathnameHasLocale = supportedLngs.some(
    (loc) => pathname.startsWith(`/${loc}/`) || pathname === `/${loc}`
  );

  if (pathnameHasLocale) {
    // La langue est dans l'URL, on la prend comme source de vÃ©ritÃ©
    const potentialLng = pathname.split('/')[1];
    if (supportedLngs.includes(potentialLng)) {
      lng = potentialLng;
    }
  } else {
    // L'URL n'a pas de langue, on essaie de la dÃ©tecter depuis le cookie ou l'en-tÃªte
    if (req.cookies.has(cookieName)) {
      const cookieLang = req.cookies.get(cookieName)?.value;
      if (cookieLang && supportedLngs.includes(cookieLang)) {
        lng = cookieLang;
      }
    }
    // DÃ©commenter ce bloc si on veut dÃ©tecter la langue du navigateur
    // if (!lng && req.headers.has('accept-language')) {
    //   lng = acceptLanguage.get(req.headers.get('accept-language'));
    // }
    // Pour garantir que franÃ§ais est toujours la langue par dÃ©faut
    if (!lng) {
      lng = fallbackLng; // 'fr' dÃ©fini dans i18n.ts
    }

    // Rediriger vers le mÃªme chemin prÃ©fixÃ© par la langue dÃ©tectÃ©e
    // ex: /about -> /fr/about, / -> /fr
    const newPath = pathname === '/' ? '' : pathname;
    const newUrl = new URL(`/${lng}${newPath}`, req.url);
    const response = NextResponse.redirect(newUrl);
    // Mettre Ã  jour le cookie avec la langue de redirection
    if (lng && supportedLngs.includes(lng)) {
      response.cookies.set(cookieName, lng, { path: '/' });
    }
    return response;
  }

  // Si on arrive ici, l'URL avait une langue, ou on n'a pas redirigÃ© (cas peu probable avec le matcher actuel).
  // On s'assure que le cookie est synchronisÃ© avec la langue actuelle (soit de l'URL, soit dÃ©tectÃ©e).
  const response = NextResponse.next();
  if (lng && supportedLngs.includes(lng)) {
    // Si le cookie n'existe pas ou est diffÃ©rent de la langue dÃ©terminÃ©e (par URL ou dÃ©tection initiale)
    if (!req.cookies.has(cookieName) || req.cookies.get(cookieName)?.value !== lng) {
      response.cookies.set(cookieName, lng, { path: '/' });
    }
  }
  return response;
}

```

## FILE: src/i18n.server.ts
```typescript
import { createInstance, i18n as I18nInstanceType } from 'i18next';
import { initReactI18next } from 'react-i18next/initReactI18next';
import resourcesToBackend from 'i18next-resources-to-backend';
// Correct path: i18n.ts is one level up from src/ (at project root)
import { fallbackLng, supportedLngs, defaultNS, i18nConfig } from '../i18n';

const initServerI18next = async (lng: string, ns: string | string[]): Promise<I18nInstanceType> => {
  const i18nInstance = createInstance();
  await i18nInstance
    .use(initReactI18next)
    .use(resourcesToBackend((language: string, namespace: string) =>
      // Correct path: From src/, go up to project root, then to public/locales
      import(`../../public/locales/${language}/${namespace}.json`)
    ))
    .init({
      ...i18nConfig,
      lng: lng,
      ns: ns,
      fallbackLng: fallbackLng,
      supportedLngs: supportedLngs,
      defaultNS: defaultNS,
      preload: supportedLngs,
    });
  return i18nInstance;
};

export default initServerI18next;
```

## --- SAMPLE TRANSLATIONS ---

## FILE: public/locales/fr/common.json
```json
{
  "laboName": "Laboratoire El Allali",
  "currentLanguage": "FranÃ§ais",
  "opening_hours": "Horaires d'ouverture",
  "opening_hours_text": "Lun-Sam : 7h30 - 18h30\nDim : 08h00 - 18h00",
  "open": "Ouvert",
  "closed": "FermÃ©",

  "why_choose_us": "Pourquoi Nous Choisir ?",
  "certified_quality": "QualitÃ© certifiÃ©e",
  "certified_quality_text": "Laboratoire accrÃ©ditÃ© aux normes internationales pour des rÃ©sultats fiables.",
  "state_of_the_art_equipment": "Ã‰quipement de pointe",
  "state_of_the_art_equipment_text": "Technologies avancÃ©es pour des analyses prÃ©cises et rapides.",
  "experienced_team": "Ã‰quipe expÃ©rimentÃ©e",
  "experienced_team_text": "Biologistes et techniciens hautement qualifiÃ©s Ã  votre service.",
  "dedicated_patient_service": "Service patient dÃ©diÃ©",
  "dedicated_patient_service_text": "Attention personnalisÃ©e et accompagnement Ã  chaque Ã©tape.",

  "our_main_services": "Nos Services Principaux",
  "about": "Ã€ propos",
  "about_description": "Laboratoire d'analyses mÃ©dicales offrant une gamme complÃ¨te de services de diagnostic avec des Ã©quipements de pointe et une Ã©quipe expÃ©rimentÃ©e pour des rÃ©sultats prÃ©cis et rapides.",
  "quick_links": "Liens rapides",
  "blood_tests": "Analyses de sang",
  "blood_tests_text": "Analyses complÃ¨tes et spÃ©cialisÃ©es avec rÃ©sultats rapides et prÃ©cis.",
  "learn_more": "En savoir plus",
  "home_service": "GLABO - Ã€ Domicile",
  "home_service_text": "Service de prÃ©lÃ¨vement Ã  domicile pour votre confort et sÃ©curitÃ©.",
  "health_checks": "Bilans de santÃ©",
  "health_checks_text": "Bilans personnalisÃ©s pour le suivi prÃ©ventif de votre santÃ©.",

  "get_directions": "ItinÃ©raire",
  "call_us": "Appeler",
  "our_location": "Notre Localisation",
  "laboratory_name": "Laboratoire El Allali",
  "laboratory_name_short": "Labo El Allali",
  "laboratory_address": "61 Bis, Rue de Marrakech, 80020, Agadir, Maroc",
  "loading_map": "Chargement de la carte",

  "home": "Accueil",
  "appointment": "Prendre RDV",
  "glabo": "PrÃ©lÃ¨vement Ã  Domicile",
  "contact": "Contact",
  "navigation": {
    "analyses_catalog": "Catalogue Analyses"
  },
  "changeLanguage": "Changer de langue",
  "french": "FranÃ§ais",
  "arabic": "Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©",
  "close_menu": "Fermer le menu",

  "contact_on_whatsapp": "Contactez-nous sur WhatsApp",
  "contact_title": "Nous Contacter et Informations du Laboratoire",
  "lab_coordinates": "CoordonnÃ©es du Laboratoire",
  "address_label": "Adresse :",
  "landline_label": "Fixe :",
  "whatsapp_label": "WhatsApp :",
  "companies_label": "SociÃ©tÃ©s et autres :",
  "fax_label": "Fax :",
  "email_label": "Email :",
  "find_us": "Comment nous trouver",
  "find_us_text": "Notre laboratoire est situÃ© au cÅ“ur d'Agadir, facilement accessible en voiture ou en transport en commun. Un parking est disponible Ã  proximitÃ© pour votre commoditÃ©.",
  "emergency_contact": "Pour toute urgence en dehors des heures d'ouverture, veuillez composer le numÃ©ro d'urgence indiquÃ© ci-dessous.",
  "working_hours_label": "Horaires :",
  "monday_to_saturday": "Lundi au Samedi: 7h30 Ã  18h30",
  "sunday": "Dimanche: 08h00 Ã  18h00",
  "send": "Envoyer",
  "view_map": "Voir sur la carte",

  "appointment_title": "Prendre Rendez-vous",
  "name": "Nom",
  "phone": "TÃ©lÃ©phone",
  "email": "Email",
  "desired_date": "Date souhaitÃ©e",
  "desired_time": "Heure souhaitÃ©e",
  "comments": "Commentaires",
  "prescription": "Ordonnance",
  "yes": "Oui",
  "no": "Non",
  "reset": "RÃ©initialiser",
  "copy": "Copier",
  "send_whatsapp": "Envoyer par WhatsApp",
  "required_fields_alert": "Veuillez remplir tous les champs obligatoires (nom, tÃ©lÃ©phone, date, heure).",
  "success_message": "Votre demande a bien Ã©tÃ© envoyÃ©e.",

  "glabo_title": "PrÃ©lÃ¨vement Ã  Domicile",
  "sampling_place": "Lieu de prÃ©lÃ¨vement",
  "lab_contact": "Contact Laboratoire :",

  "welcome_banner": "Bienvenue au Laboratoire El Allali",
  "welcome_description": "Votre santÃ©, notre prioritÃ©. Analyses mÃ©dicales prÃ©cises et rapides Ã  Agadir.",
  "banner_alt": "Laboratoire El Allali Banner",
  "navigate_to_lab": "Naviguer vers le labo",

  "practical_info": "Informations pratiques",
  "faq": "Questions frÃ©quentes",
  "rights_reserved": "Tous droits rÃ©servÃ©s",
  
  "pwa": {
    "install_app_title": "Installer l'application du Labo",
    "install_app_title_labo": "Installer l'application du Labo",
    "install_app_button": "Installer l'App",
    "install_banner_text": "Installez notre application pour un accÃ¨s rapide !",
    "install_popup_title": "Installer l'application du Labo ?",
    "install_now": "Installer",
    "install_popup_description": "Obtenez une expÃ©rience optimisÃ©e et un accÃ¨s rapide Ã  nos services en installant l'application sur votre appareil.",
    "install_confirm": "Oui, Installer",
    "later": "Plus tard",
    "dismiss_popup_aria": "Fermer ce message",
    "ios_install_prompt_part1": "Pour un accÃ¨s facile, ajoutez-nous Ã  l'Ã©cran d'accueil :",
    "ios_install_prompt_part2": "Appuyez sur",
    "ios_install_prompt_part3": "puis 'Sur l'Ã©cran d'accueil'.",
    "ios_share_alt": "l'icÃ´ne Partager",
    "dismiss_banner_aria": "Fermer le bandeau d'installation"
  },
  
  "analyses_catalog": {
    "selection": {
      "count_zero": "{{count}} analyse sÃ©lectionnÃ©e",
      "count_one": "{{count}} analyse sÃ©lectionnÃ©e",
      "count_other": "{{count}} analyses sÃ©lectionnÃ©es",
      "analyses_selected": "analyses sÃ©lectionnÃ©es",
      "total": "Total",
      "reset": "RÃ©initialiser",
      "tooltip": "Calcul automatique du coÃ»t total des analyses sÃ©lectionnÃ©es",
      "send_whatsapp": "Envoyer via WhatsApp",
      "whatsapp_message": {
        "greeting": "Bonjour Laboratoire El Allali,",
        "intro": "Je suis intÃ©ressÃ©(e) par les analyses suivantes :",
        "analysis_item_prefix": "- ",
        "total_label": "Total estimÃ© :",
        "currency": "MAD",
        "closing_remark": "Pouvez-vous me donner plus d'informations ?",
        "website_reference": "SÃ©lection faite depuis le site web."
      }
    }
  }
}

```

## FILE: public/locales/ar/common.json
```json
{
  "laboName": "Ù…Ø®ØªØ¨Ø± Ø§Ù„Ø¹Ù„Ø§Ù„ÙŠ",
  "currentLanguage": "Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©",
  "opening_hours": "Ø³Ø§Ø¹Ø§Øª Ø§Ù„Ø¹Ù…Ù„",
  "opening_hours_text": "Ø§Ù„Ø¥Ø«Ù†ÙŠÙ†-Ø§Ù„Ø³Ø¨Øª: 7:30 - 18:30\nØ§Ù„Ø£Ø­Ø¯: 08:00 - 18:00",
  "open": "Ù…ÙØªÙˆØ­",
  "closed": "Ù…ØºÙ„Ù‚",

  "why_choose_us": "Ù„Ù…Ø§Ø°Ø§ ØªØ®ØªØ§Ø±Ù†Ø§ØŸ",
  "certified_quality": "Ø¬ÙˆØ¯Ø© Ù…Ø¹ØªÙ…Ø¯Ø©",
  "certified_quality_text": "Ù…Ø®ØªØ¨Ø± Ù…Ø¹ØªÙ…Ø¯ Ø¨Ù…Ø¹Ø§ÙŠÙŠØ± Ø¯ÙˆÙ„ÙŠØ© Ù„Ù†ØªØ§Ø¦Ø¬ Ù…ÙˆØ«ÙˆÙ‚Ø©.",
  "state_of_the_art_equipment": "Ù…Ø¹Ø¯Ø§Øª Ù…ØªØ·ÙˆØ±Ø©",
  "state_of_the_art_equipment_text": "ØªÙ‚Ù†ÙŠØ§Øª Ø­Ø¯ÙŠØ«Ø© Ù„ØªØ­Ø§Ù„ÙŠÙ„ Ø¯Ù‚ÙŠÙ‚Ø© ÙˆØ³Ø±ÙŠØ¹Ø©.",
  "experienced_team": "ÙØ±ÙŠÙ‚ Ø°Ùˆ Ø®Ø¨Ø±Ø©",
  "experienced_team_text": "Ø£Ø®ØµØ§Ø¦ÙŠÙˆÙ† ÙˆÙÙ†ÙŠÙˆÙ† Ù…Ø¤Ù‡Ù„ÙˆÙ† Ù„Ø®Ø¯Ù…ØªÙƒÙ….",
  "dedicated_patient_service": "Ø®Ø¯Ù…Ø© Ù…Ø®ØµØµØ© Ù„Ù„Ù…Ø±Ø¶Ù‰",
  "dedicated_patient_service_text": "Ø±Ø¹Ø§ÙŠØ© Ø´Ø®ØµÙŠØ© ÙˆÙ…Ø±Ø§ÙÙ‚Ø© ÙÙŠ ÙƒÙ„ Ø®Ø·ÙˆØ©.",

  "our_main_services": "Ø®Ø¯Ù…Ø§ØªÙ†Ø§ Ø§Ù„Ø±Ø¦ÙŠØ³ÙŠØ©",
  "about": "Ù†Ø¨Ø°Ø© Ø¹Ù†Ø§",
  "about_description": "Ù…Ø®ØªØ¨Ø± Ù„Ù„ØªØ­Ø§Ù„ÙŠÙ„ Ø§Ù„Ø·Ø¨ÙŠØ© ÙŠÙ‚Ø¯Ù… Ù…Ø¬Ù…ÙˆØ¹Ø© ÙƒØ§Ù…Ù„Ø© Ù…Ù† Ø®Ø¯Ù…Ø§Øª Ø§Ù„ØªØ´Ø®ÙŠØµ Ù…Ø¹ Ù…Ø¹Ø¯Ø§Øª Ù…ØªØ·ÙˆØ±Ø© ÙˆÙØ±ÙŠÙ‚ Ø°Ùˆ Ø®Ø¨Ø±Ø© Ù„Ù†ØªØ§Ø¦Ø¬ Ø¯Ù‚ÙŠÙ‚Ø© ÙˆØ³Ø±ÙŠØ¹Ø©.",
  "quick_links": "Ø±ÙˆØ§Ø¨Ø· Ø³Ø±ÙŠØ¹Ø©",
  "blood_tests": "ØªØ­Ø§Ù„ÙŠÙ„ Ø§Ù„Ø¯Ù…",
  "blood_tests_text": "ØªØ­Ø§Ù„ÙŠÙ„ Ø´Ø§Ù…Ù„Ø© ÙˆÙ…ØªØ®ØµØµØ© Ø¨Ù†ØªØ§Ø¦Ø¬ Ø¯Ù‚ÙŠÙ‚Ø© ÙˆØ³Ø±ÙŠØ¹Ø©.",
  "learn_more": "Ø§Ù„Ù…Ø²ÙŠØ¯",
  "home_service": "Ø®Ø¯Ù…Ø© GLABO - ÙÙŠ Ø§Ù„Ù…Ù†Ø²Ù„",
  "home_service_text": "Ø®Ø¯Ù…Ø© Ø³Ø­Ø¨ Ø§Ù„Ø¹ÙŠÙ†Ø§Øª ÙÙŠ Ø§Ù„Ù…Ù†Ø²Ù„ Ù„Ø±Ø§Ø­ØªÙƒÙ… ÙˆØ³Ù„Ø§Ù…ØªÙƒÙ….",
  "health_checks": "ÙØ­ÙˆØµØ§Øª ØµØ­ÙŠØ©",
  "health_checks_text": "ÙØ­ÙˆØµØ§Øª Ù…Ø®ØµØµØ© Ù„Ù„Ù…ØªØ§Ø¨Ø¹Ø© Ø§Ù„ÙˆÙ‚Ø§Ø¦ÙŠØ© Ù„ØµØ­ØªÙƒ.",

  "get_directions": "Ø§ØªØ¬Ø§Ù‡Ø§Øª",
  "call_us": "Ø§ØªØµÙ„",
  "our_location": "Ù…ÙˆÙ‚Ø¹Ù†Ø§",
  "laboratory_name": "Ù…Ø®ØªØ¨Ø± Ø§Ù„Ø¹Ù„Ø§Ù„ÙŠ",
  "laboratory_name_short": "Ù…Ø®ØªØ¨Ø± Ø§Ù„Ø¹Ù„Ø§Ù„ÙŠ",
  "laboratory_address": "61 Ø¨ÙŠØ³ØŒ Ø´Ø§Ø±Ø¹ Ù…Ø±Ø§ÙƒØ´ØŒ 80020ØŒ Ø£ØºØ§Ø¯ÙŠØ±ØŒ Ø§Ù„Ù…ØºØ±Ø¨",
  "loading_map": "Ø¬Ø§Ø±ÙŠ ØªØ­Ù…ÙŠÙ„ Ø§Ù„Ø®Ø±ÙŠØ·Ø©...",

  "home": "Ø§Ù„Ø±Ø¦ÙŠØ³ÙŠØ©",
  "appointment": "Ø­Ø¬Ø² Ù…ÙˆØ¹Ø¯",
  "glabo": "ÙØ­Øµ Ù…Ù†Ø²Ù„ÙŠ",
  "contact": "Ø§ØªØµÙ„ Ø¨Ù†Ø§",
  "navigation": {
    "analyses_catalog": "Ø¯Ù„ÙŠÙ„ Ø§Ù„ØªØ­Ø§Ù„ÙŠÙ„"
  },
  "changeLanguage": "ØªØºÙŠÙŠØ± Ø§Ù„Ù„ØºØ©",
  "french": "FranÃ§ais",
  "arabic": "Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©",
  "close_menu": "Ø¥ØºÙ„Ø§Ù‚ Ø§Ù„Ù‚Ø§Ø¦Ù…Ø©",

  "contact_on_whatsapp": "Ø§ØªØµÙ„ Ø¨Ù†Ø§ Ø¹Ù„Ù‰ ÙˆØ§ØªØ³Ø§Ø¨",
  "contact_title": "Ø§ØªØµÙ„ Ø¨Ù†Ø§ ÙˆÙ…Ø¹Ù„ÙˆÙ…Ø§Øª Ø§Ù„Ù…Ø®ØªØ¨Ø±",
  "lab_coordinates": "Ø¥Ø­Ø¯Ø§Ø«ÙŠØ§Øª Ø§Ù„Ù…Ø®ØªØ¨Ø±",
  "address_label": "Ø§Ù„Ø¹Ù†ÙˆØ§Ù† :",
  "landline_label": "Ø§Ù„Ù‡Ø§ØªÙ Ø§Ù„Ø«Ø§Ø¨Øª :",
  "whatsapp_label": "ÙˆØ§ØªØ³Ø§Ø¨ :",
  "companies_label": "Ø´Ø±ÙƒØ§Øª ÙˆØ¬Ù‡Ø§Øª Ø£Ø®Ø±Ù‰ :",
  "fax_label": "ÙØ§ÙƒØ³ :",
  "email_label": "Ø§Ù„Ø¨Ø±ÙŠØ¯ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ :",
  "find_us": "ÙƒÙŠÙ ØªØ¬Ø¯Ù†Ø§",
  "find_us_text": "ÙŠÙ‚Ø¹ Ù…Ø®ØªØ¨Ø±Ù†Ø§ ÙÙŠ Ù‚Ù„Ø¨ Ø£ØºØ§Ø¯ÙŠØ±ØŒ ÙˆÙŠÙ…ÙƒÙ† Ø§Ù„ÙˆØµÙˆÙ„ Ø¥Ù„ÙŠÙ‡ Ø¨Ø³Ù‡ÙˆÙ„Ø© Ø¨Ø§Ù„Ø³ÙŠØ§Ø±Ø© Ø£Ùˆ ÙˆØ³Ø§Ø¦Ù„ Ø§Ù„Ù†Ù‚Ù„ Ø§Ù„Ø¹Ø§Ù…. ÙŠØªÙˆÙØ± Ù…ÙˆÙ‚Ù Ø³ÙŠØ§Ø±Ø§Øª Ù‚Ø±ÙŠØ¨ Ù„Ø±Ø§Ø­ØªÙƒÙ….",
  "emergency_contact": "ÙÙŠ Ø­Ø§Ù„Ø© Ø§Ù„Ø·ÙˆØ§Ø±Ø¦ Ø®Ø§Ø±Ø¬ Ø³Ø§Ø¹Ø§Øª Ø§Ù„Ø¹Ù…Ù„ØŒ ÙŠØ±Ø¬Ù‰ Ø§Ù„Ø§ØªØµØ§Ù„ Ø¨Ø±Ù‚Ù… Ø§Ù„Ø·ÙˆØ§Ø±Ø¦ Ø§Ù„Ù…Ø°ÙƒÙˆØ± Ø£Ø¯Ù†Ø§Ù‡.",
  "working_hours_label": "Ø³Ø§Ø¹Ø§Øª Ø§Ù„Ø¹Ù…Ù„ :",
  "monday_to_saturday": "Ø§Ù„Ø§Ø«Ù†ÙŠÙ† Ø¥Ù„Ù‰ Ø§Ù„Ø³Ø¨Øª: 7:30 Ø¥Ù„Ù‰ 18:30",
  "sunday": "Ø§Ù„Ø£Ø­Ø¯: 08:00 Ø¥Ù„Ù‰ 18:00",
  "send": "Ø¥Ø±Ø³Ø§Ù„",
  "view_map": "Ø¹Ø±Ø¶ Ø¹Ù„Ù‰ Ø§Ù„Ø®Ø±ÙŠØ·Ø©",

  "appointment_title": "Ø­Ø¬Ø² Ù…ÙˆØ¹Ø¯",
  "name": "Ø§Ù„Ø§Ø³Ù…",
  "phone": "Ø§Ù„Ù‡Ø§ØªÙ",
  "email": "Ø§Ù„Ø¨Ø±ÙŠØ¯ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ",
  "desired_date": "Ø§Ù„ØªØ§Ø±ÙŠØ® Ø§Ù„Ù…Ø·Ù„ÙˆØ¨",
  "desired_time": "Ø§Ù„ÙˆÙ‚Øª Ø§Ù„Ù…Ø·Ù„ÙˆØ¨",
  "comments": "Ù…Ù„Ø§Ø­Ø¸Ø§Øª",
  "prescription_question": "ÙˆØµÙØ© Ø·Ø¨ÙŠØ©",
  "yes": "Ù†Ø¹Ù…",
  "no": "Ù„Ø§",
  "reset": "Ø¥Ø¹Ø§Ø¯Ø© ØªØ¹ÙŠÙŠÙ†",
  "copy": "Ù†Ø³Ø®",
  "send_whatsapp_appointment": "Ø¥Ø±Ø³Ø§Ù„ Ø¹Ø¨Ø± ÙˆØ§ØªØ³Ø§Ø¨",
  "required_fields_alert": "ÙŠØ±Ø¬Ù‰ Ù…Ù„Ø¡ Ø¬Ù…ÙŠØ¹ Ø§Ù„Ø­Ù‚ÙˆÙ„ Ø§Ù„Ø¥Ù„Ø²Ø§Ù…ÙŠØ© (Ø§Ù„Ø§Ø³Ù…ØŒ Ø§Ù„Ù‡Ø§ØªÙØŒ Ø§Ù„ØªØ§Ø±ÙŠØ®ØŒ Ø§Ù„ÙˆÙ‚Øª).",
  "success_message": "ØªÙ… Ø¥Ø±Ø³Ø§Ù„ Ø·Ù„Ø¨Ùƒ Ø¨Ù†Ø¬Ø§Ø­.",

  "glabo_title": "ÙØ­Øµ Ù…Ù†Ø²Ù„ÙŠ",
  "sampling_place": "Ù…ÙƒØ§Ù† Ø£Ø®Ø° Ø§Ù„Ø¹ÙŠÙ†Ø©",
  "lab_contact": "Ø§Ù„Ø§ØªØµØ§Ù„ Ø¨Ø§Ù„Ù…Ø®ØªØ¨Ø± :",
  
  "at_home": "ÙÙŠ Ø§Ù„Ù…Ù†Ø²Ù„",
  "at_work": "ÙÙŠ Ù…ÙƒØ§Ù† Ø§Ù„Ø¹Ù…Ù„",
  "home_sampling": "ÙÙŠ Ø§Ù„Ù…Ù†Ø²Ù„",
  "work_sampling": "ÙÙŠ Ù…ÙƒØ§Ù† Ø§Ù„Ø¹Ù…Ù„",
  "address_instructions": "Ø§Ù„Ø¹Ù†ÙˆØ§Ù† (Ù„Ù„ÙØ­Øµ)",
  "address_placeholder": "Ø£Ø¯Ø®Ù„ Ø¹Ù†ÙˆØ§Ù†Ùƒ Ø§Ù„ÙƒØ§Ù…Ù„", 
  "locate_position": "ØªØ­Ø¯ÙŠØ¯ Ù…ÙˆÙ‚Ø¹ÙŠ",
  "access_instructions": "ØªØ¹Ù„ÙŠÙ…Ø§Øª Ø§Ù„Ø¯Ø®ÙˆÙ„ (Ø±Ù…Ø² Ø§Ù„Ù…Ø¨Ù†Ù‰ØŒ Ø§Ù„Ø·Ø§Ø¨Ù‚ØŒ Ø¥Ù„Ø®.)",
  "optional": "Ø§Ø®ØªÙŠØ§Ø±ÙŠ",
  "date_placeholder": "Ø§Ø®ØªØ± ØªØ§Ø±ÙŠØ®Ø§Ù‹",
  "choose_time": "-- Ø§Ø®ØªØ± ÙˆÙ‚ØªØ§Ù‹ --",
  "send_request_email": "Ø¥Ø±Ø³Ø§Ù„ Ø·Ù„Ø¨ Ø§Ù„ÙØ­Øµ Ø¹Ø¨Ø± Ø§Ù„Ø¨Ø±ÙŠØ¯ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ",
  "send_whatsapp": "Ø·Ù„Ø¨ ÙØ­Øµ Ø¹Ø¨Ø± ÙˆØ§ØªØ³Ø§Ø¨",
  "reminder": "ØªØ°ÙƒÙŠØ±",
  "prescription_reminder": "Ø¥Ø°Ø§ ÙƒØ§Ù†Øª Ù„Ø¯ÙŠÙƒ ÙˆØµÙØ© Ø·Ø¨ÙŠØ©ØŒ Ù„Ø§ ØªÙ†Ø³ Ø¥Ø±ÙØ§Ù‚Ù‡Ø§ Ø¨Ø¨Ø±ÙŠØ¯Ùƒ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ Ø£Ùˆ Ø±Ø³Ø§Ù„Ø© ÙˆØ§ØªØ³Ø§Ø¨",
  "click_for_maps": "Ø§Ù†Ù‚Ø± Ø¹Ù„Ù‰ Ù‡Ø°Ø§ Ø§Ù„Ø±Ø§Ø¨Ø· Ù„ÙØªØ­ Ø®Ø±Ø§Ø¦Ø· Ø¬ÙˆØ¬Ù„",
  "loading_location": "Ø¬Ø§Ø±ÙŠ ØªØ­Ù…ÙŠÙ„ Ø§Ù„Ù…ÙˆÙ‚Ø¹...",
  "location_found": "ØªÙ… Ø§Ù„Ø¹Ø«ÙˆØ± Ø¹Ù„Ù‰ Ø§Ù„Ù…ÙˆÙ‚Ø¹ Ø§Ù„ØªÙ‚Ø±ÙŠØ¨ÙŠ.",
  "geolocation_not_supported": "Ø®Ø¯Ù…Ø© ØªØ­Ø¯ÙŠØ¯ Ø§Ù„Ù…ÙˆÙ‚Ø¹ ØºÙŠØ± Ù…Ø¯Ø¹ÙˆÙ…Ø© ÙÙŠ Ù…ØªØµÙØ­Ùƒ.",
  "permission_denied": "Ù„Ù‚Ø¯ Ø±ÙØ¶Øª Ø§Ù„ÙˆØµÙˆÙ„ Ø¥Ù„Ù‰ Ù…ÙˆÙ‚Ø¹Ùƒ.",
  "position_unavailable": "Ù…Ø¹Ù„ÙˆÙ…Ø§Øª Ø§Ù„Ù…ÙˆÙ‚Ø¹ ØºÙŠØ± Ù…ØªÙˆÙØ±Ø©.",
  "timeout": "Ø§Ù†ØªÙ‡Øª Ù…Ù‡Ù„Ø© Ø·Ù„Ø¨ ØªØ­Ø¯ÙŠØ¯ Ø§Ù„Ù…ÙˆÙ‚Ø¹.",
  "unknown_error": "Ø®Ø·Ø£ ØºÙŠØ± Ù…Ø¹Ø±ÙˆÙ: {{message}}",
  "geolocation_error": "Ø®Ø·Ø£ ÙÙŠ ØªØ­Ø¯ÙŠØ¯ Ø§Ù„Ù…ÙˆÙ‚Ø¹: {{errorMessage}}",
  "coordinates_text": "Ø§Ù„Ø¥Ø­Ø¯Ø§Ø«ÙŠØ§Øª: Ø®Ø· Ø§Ù„Ø¹Ø±Ø¶: {{lat}}ØŒ Ø®Ø· Ø§Ù„Ø·ÙˆÙ„: {{lon}}\nØ±Ø§Ø¨Ø· Ø®Ø±Ø§Ø¦Ø· Ø¬ÙˆØ¬Ù„: {{link}}\nÙŠØ±Ø¬Ù‰ Ø¥ÙƒÙ…Ø§Ù„ Ø¹Ù†ÙˆØ§Ù†Ùƒ Ø£Ø¹Ù„Ø§Ù‡ Ø¥Ø°Ø§ Ù„Ø²Ù… Ø§Ù„Ø£Ù…Ø±.",
  "whatsapp_message_template": "Ù…Ø±Ø­Ø¨Ø§Ù‹ØŒ Ø£ÙˆØ¯ Ø·Ù„Ø¨ ÙØ­Øµ {{place}} (GLABO).\nØ§Ù„Ø§Ø³Ù…: {{name}}\nØ§Ù„Ù‡Ø§ØªÙ: {{phone}}{{email}}\nÙ…ÙƒØ§Ù† Ø§Ù„ÙØ­Øµ: {{samplingPlace}}\n{{address}}{{accessInstructions}}\nØ§Ù„ØªØ§Ø±ÙŠØ® Ø§Ù„Ù…Ø·Ù„ÙˆØ¨: {{date}}\nØ§Ù„ÙˆÙ‚Øª Ø§Ù„Ù…Ø·Ù„ÙˆØ¨: {{time}}{{comments}}\n{{prescription}}",
  "have_prescription_whatsapp": "Ù„Ø¯ÙŠ ÙˆØµÙØ© Ø·Ø¨ÙŠØ© Ø³Ø£Ø±Ø³Ù„Ù‡Ø§ Ù…Ù†ÙØµÙ„Ø© Ø¹Ø¨Ø± ÙˆØ§ØªØ³Ø§Ø¨.",
  "have_prescription": "Ù„Ø¯ÙŠ ÙˆØµÙØ© Ø·Ø¨ÙŠØ© ÙˆØ³Ø£Ø±Ø³Ù„Ù‡Ø§ ÙƒÙ…Ø±ÙÙ‚ ÙÙŠ Ø¨Ø±ÙŠØ¯ÙŠ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ.",
  "prescription_note": "Ù…Ù„Ø§Ø­Ø¸Ø©: Ù„Ø§ ØªÙ†Ø³ Ø¥Ø±ÙØ§Ù‚ ÙˆØµÙØªÙƒ Ø§Ù„Ø·Ø¨ÙŠØ© Ø¹Ù†Ø¯ Ø¥Ø±Ø³Ø§Ù„ Ø¨Ø±ÙŠØ¯Ùƒ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ Ø£Ùˆ Ø±Ø³Ø§Ù„Ø© ÙˆØ§ØªØ³Ø§Ø¨.",
  "address_not_specified": "Ù„Ù… ÙŠØªÙ… ØªØ­Ø¯ÙŠØ¯ Ø§Ù„Ø¹Ù†ÙˆØ§Ù† (Ø³ÙŠØªÙ… Ø§Ù„ØªØ£ÙƒÙŠØ¯ Ø¹Ø¨Ø± Ø§Ù„Ù‡Ø§ØªÙ).",
  "glabo_request_subject": "Ø·Ù„Ø¨ ÙØ­Øµ GLABO - {{name}}",
  "glabo_email_template": "Ù…Ø±Ø­Ø¨Ø§Ù‹ØŒ\n\nØ£ÙˆØ¯ Ø·Ù„Ø¨ ÙØ­Øµ ÙÙŠ Ø§Ù„Ù…Ù†Ø²Ù„/Ù…ÙƒØ§Ù† Ø§Ù„Ø¹Ù…Ù„ (GLABO):\n\nØ§Ù„Ø§Ø³Ù…: {{name}}\nØ§Ù„Ù‡Ø§ØªÙ: {{phone}}{{email}}\nÙ…ÙƒØ§Ù† Ø§Ù„ÙØ­Øµ: {{samplingPlace}}\n{{address}}{{accessInstructions}}\nØ§Ù„ØªØ§Ø±ÙŠØ® Ø§Ù„Ù…Ø·Ù„ÙˆØ¨: {{date}}\nØ§Ù„ÙˆÙ‚Øª Ø§Ù„Ù…Ø·Ù„ÙˆØ¨: {{time}}{{comments}}\n\n{{prescription}}\n\nØ´ÙƒØ±Ø§Ù‹ Ù„ÙƒÙ… Ù„Ù„ØªÙˆØ§ØµÙ„ Ù…Ø¹ÙŠ Ù„ØªØ£ÙƒÙŠØ¯ Ø§Ù„ØªÙØ§ØµÙŠÙ„.\n\nÙ…Ø¹ Ø£Ø·ÙŠØ¨ Ø§Ù„ØªØ­ÙŠØ§Øª.",

  "welcome_banner": "Ù…Ø±Ø­Ø¨Ù‹Ø§ Ø¨ÙƒÙ… ÙÙŠ Ù…Ø®ØªØ¨Ø± Ø§Ù„Ø¹Ù„Ø§Ù„ÙŠ",
  "welcome_description": "ØµØ­ØªÙƒ Ù‡ÙŠ Ø£ÙˆÙ„ÙˆÙŠØªÙ†Ø§. ØªØ­Ø§Ù„ÙŠÙ„ Ø·Ø¨ÙŠØ© Ø¯Ù‚ÙŠÙ‚Ø© ÙˆØ³Ø±ÙŠØ¹Ø© ÙÙŠ Ø£ÙƒØ§Ø¯ÙŠØ±.",
  "banner_alt": "ØµÙˆØ±Ø© Ù…Ø®ØªØ¨Ø± Ø§Ù„Ø¹Ù„Ø§Ù„ÙŠ",
  
  "analyses_catalog": {
    "selection": {
      "count_zero": "{{count}} ØªØ­Ù„ÙŠÙ„ Ù…Ø­Ø¯Ø¯",
      "count_one": "{{count}} ØªØ­Ù„ÙŠÙ„ Ù…Ø­Ø¯Ø¯",
      "count_other": "{{count}} ØªØ­Ø§Ù„ÙŠÙ„ Ù…Ø­Ø¯Ø¯Ø©",
      "analyses_selected": "ØªØ­Ø§Ù„ÙŠÙ„ Ù…Ø­Ø¯Ø¯Ø©",
      "total": "Ø§Ù„Ù…Ø¬Ù…ÙˆØ¹",
      "reset": "Ø¥Ø¹Ø§Ø¯Ø© Ø¶Ø¨Ø·",
      "tooltip": "Ø­Ø³Ø§Ø¨ ØªÙ„Ù‚Ø§Ø¦ÙŠ Ù„Ù„ØªÙƒÙ„ÙØ© Ø§Ù„Ø¥Ø¬Ù…Ø§Ù„ÙŠØ© Ù„Ù„ØªØ­Ø§Ù„ÙŠÙ„ Ø§Ù„Ù…Ø­Ø¯Ø¯Ø©",
      "send_whatsapp": "Ø¥Ø±Ø³Ø§Ù„ Ø¹Ø¨Ø± Ø§Ù„ÙˆØ§ØªØ³Ø§Ø¨",
      "whatsapp_message": {
        "greeting": "Ù…Ø±Ø­Ø¨Ø§Ù‹ Ù…Ø®ØªØ¨Ø± Ø§Ù„Ø¹Ù„Ø§Ù„ÙŠ,",
        "intro": "Ø£Ù†Ø§ Ù…Ù‡ØªÙ…/Ù…Ù‡ØªÙ…Ø© Ø¨Ø§Ù„ØªØ­Ø§Ù„ÙŠÙ„ Ø§Ù„ØªØ§Ù„ÙŠØ©:",
        "analysis_item_prefix": "- ",
        "total_label": "Ø§Ù„ØªÙƒÙ„ÙØ© Ø§Ù„Ø¥Ø¬Ù…Ø§Ù„ÙŠØ© Ø§Ù„Ù…Ù‚Ø¯Ø±Ø©:",
        "currency": "Ø¯Ø±Ù‡Ù…",
        "closing_remark": "Ù‡Ù„ ÙŠÙ…ÙƒÙ†ÙƒÙ… ØªØ²ÙˆÙŠØ¯ÙŠ Ø¨Ù…Ø²ÙŠØ¯ Ù…Ù† Ø§Ù„Ù…Ø¹Ù„ÙˆÙ…Ø§ØªØŸ",
        "website_reference": "ØªÙ… Ø§Ù„Ø§Ø®ØªÙŠØ§Ø± Ù…Ù† Ø®Ù„Ø§Ù„ Ø§Ù„Ù…ÙˆÙ‚Ø¹ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ."
      }
    }
  },
  "TotalCalculator": {
    "title": "Ø­Ø§Ø³Ø¨Ø© Ø§Ù„ØªÙƒÙ„ÙØ© Ø§Ù„Ø¥Ø¬Ù…Ø§Ù„ÙŠØ©",
    "label": "Ø§Ù„ØªÙƒÙ„ÙØ© Ø§Ù„Ø¥Ø¬Ù…Ø§Ù„ÙŠØ©",
    "currency": "Ø¯Ø±Ù‡Ù…",
    "button": "Ø­Ø³Ø§Ø¨ Ø§Ù„ØªÙƒÙ„ÙØ©"
  },

  "navigate_to_lab": "Ø§Ù„Ø§ØªØ¬Ø§Ù‡ Ø¥Ù„Ù‰ Ø§Ù„Ù…Ø®ØªØ¨Ø±",

  "practical_info": "Ù…Ø¹Ù„ÙˆÙ…Ø§Øª Ø¹Ù…Ù„ÙŠØ©",
  "faq": "Ø§Ù„Ø£Ø³Ø¦Ù„Ø© Ø§Ù„Ø´Ø§Ø¦Ø¹Ø©",
  "rights_reserved": "Ø¬Ù…ÙŠØ¹ Ø§Ù„Ø­Ù‚ÙˆÙ‚ Ù…Ø­ÙÙˆØ¸Ø©",
  
  "pwa": {
    "install_app_title": "ØªØ«Ø¨ÙŠØª ØªØ·Ø¨ÙŠÙ‚ Ø§Ù„Ù…Ø®ØªØ¨Ø±",
    "install_app_title_labo": "ØªØ«Ø¨ÙŠØª ØªØ·Ø¨ÙŠÙ‚ Ø§Ù„Ù…Ø®ØªØ¨Ø±",
    "install_app_button": "ØªØ«Ø¨ÙŠØª Ø§Ù„ØªØ·Ø¨ÙŠÙ‚",
    "install_banner_text": "Ø«Ø¨Øª ØªØ·Ø¨ÙŠÙ‚Ù†Ø§ Ù„Ù„ÙˆØµÙˆÙ„ Ø§Ù„Ø³Ø±ÙŠØ¹!",
    "install_popup_title": "ØªØ«Ø¨ÙŠØª ØªØ·Ø¨ÙŠÙ‚ Ø§Ù„Ù…Ø®ØªØ¨Ø±ØŸ",
    "install_now": "ØªØ«Ø¨ÙŠØª Ø§Ù„Ø¢Ù†",
    "install_popup_description": "Ø§Ø­ØµÙ„ Ø¹Ù„Ù‰ ØªØ¬Ø±Ø¨Ø© Ù…Ø­Ø³Ù†Ø© ÙˆÙˆØµÙˆÙ„ Ø³Ø±ÙŠØ¹ Ù„Ø®Ø¯Ù…Ø§ØªÙ†Ø§ Ø¹Ù† Ø·Ø±ÙŠÙ‚ ØªØ«Ø¨ÙŠØª Ø§Ù„ØªØ·Ø¨ÙŠÙ‚ Ø¹Ù„Ù‰ Ø¬Ù‡Ø§Ø²Ùƒ.",
    "install_confirm": "Ù†Ø¹Ù…ØŒ ØªØ«Ø¨ÙŠØª",
    "later": "Ù„Ø§Ø­Ù‚Ù‹Ø§",
    "dismiss_popup_aria": "Ø¥ØºÙ„Ø§Ù‚ Ù‡Ø°Ù‡ Ø§Ù„Ø±Ø³Ø§Ù„Ø©",
    "ios_install_prompt_part1": "Ù„Ø³Ù‡ÙˆÙ„Ø© Ø§Ù„ÙˆØµÙˆÙ„ØŒ Ø£Ø¶ÙÙ†Ø§ Ø¥Ù„Ù‰ Ø´Ø§Ø´ØªÙƒ Ø§Ù„Ø±Ø¦ÙŠØ³ÙŠØ©:",
    "ios_install_prompt_part2": "Ø§Ø¶ØºØ· Ø¹Ù„Ù‰",
    "ios_install_prompt_part3": "Ø«Ù… 'Ø¥Ø¶Ø§ÙØ© Ø¥Ù„Ù‰ Ø§Ù„Ø´Ø§Ø´Ø© Ø§Ù„Ø±Ø¦ÙŠØ³ÙŠØ©'.",
    "ios_share_alt": "Ø£ÙŠÙ‚ÙˆÙ†Ø© Ø§Ù„Ù…Ø´Ø§Ø±ÙƒØ©",
    "dismiss_banner_aria": "Ø¥ØºÙ„Ø§Ù‚ Ø´Ø±ÙŠØ· Ø§Ù„ØªØ«Ø¨ÙŠØª"
  }
}

```

## --- APP ROUTES AND PAGES ---

## FILE: src/app/globals.css
```css
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&family=Public+Sans:wght@400;500;700&display=swap');

/* Import Leaflet CSS */
@import 'leaflet/dist/leaflet.css';

@import "tailwindcss";

/* Workaround for Tailwind v4 custom brand color */
.bg-bordeaux-custom {
  background-color: #800020;
  color: white;
}


/* Styles de base */
html, body {
  font-family: 'Inter', system-ui, -apple-system, sans-serif;
}

/* Couleurs personnalisÃ©es comme variables CSS pour rÃ©fÃ©rence */
:root {
  --primary-bordeaux: #800020;
  --bordeaux-dark: #600018;
  --bordeaux-light: #B84C63;
  --bordeaux-pale: #F7E7EA;
  --accent-fuchsia: #FF4081;
  --fuchsia-bright: #F50057;
  --fuchsia-light: #FF80AB;
  --fuchsia-pale: #FFF0F5;
  --medical-background: #FDF8F9;
}

/* Styles personnalisÃ©s pour les boutons et composants */
@layer components {
  .footer-gradient {
    background: linear-gradient(135deg, #800020 0%, #B84C63 60%, #FF4081 100%);
    @apply text-white;
  }
  .footer-gradient ul li {
    @apply mb-2;
  }
  .footer-gradient ul li:last-child {
    @apply mb-0;
  }
  .footer-gradient a {
    @apply block w-full text-white hover:text-[#FF4081] transition-colors;
  }

  .btn-primary {
    @apply bg-[#FF4081] text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200 hover:bg-[#F50057] hover:shadow-md hover:-translate-y-0.5;
  }

  .btn-secondary {
    @apply bg-[#800020] text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200 hover:bg-[#600018];
  }

  .btn-outline {
    @apply border-2 border-[#800020] text-[#800020] bg-transparent px-6 py-[10px] rounded-lg font-semibold transition-all duration-200;
  }
  .btn-outline:hover {
    @apply bg-[#800020] text-white border-[#800020];
  }

  .btn-text {
  color: #FF4081;
  font-weight: 600;
  padding: 0.5rem 0;
  border-bottom: 1px solid transparent;
  transition: all 0.2s ease;
  display: inline-flex;
  align-items: center;
  gap: 0.25rem;
  font-size: 1rem;
  min-height: 44px;
  min-width: 44px;
  border-radius: 0.25rem;
  outline: none;
  cursor: pointer;
  position: relative;
}
.btn-text:focus {
  box-shadow: 0 0 0 2px #FF4081;
  border-bottom: 1px solid #FF4081;
  background: rgba(255,64,129,0.08);
}
.btn-text:hover {
  border-bottom: 1px solid #FF4081;
  transform: translateY(-1px);
  background: rgba(255,64,129,0.04);
}
.btn-text .btn-chevron {
  transition: transform 0.2s;
  margin-left: 0.25rem;
  display: inline-flex;
  align-items: center;
}
.btn-text:hover .btn-chevron,
.btn-text:focus .btn-chevron {
  transform: translateX(2px);
}
@media (hover: none) and (pointer: coarse) {
  .btn-text {
    min-height: 44px;
    min-width: 44px;
    padding: 0.5rem 0.75rem;
  }
}

  .btn-link {
    @apply text-[#FF4081] bg-transparent px-4 py-2 font-semibold transition-all duration-200 hover:underline;
  }

  .card {
    @apply bg-white rounded-xl shadow-sm p-5 transition-all duration-300 border border-gray-100;
    transition-property: box-shadow, transform;
  }
  .card:hover {
    transform: translateY(-3px) scale(1.015);
    box-shadow: 0 4px 12px 0 rgba(128,0,32,0.08), 0 0.75px 3px 0 rgba(255,64,129,0.07);
  }

  .fade-in-section {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.8s cubic-bezier(.4,0,.2,1), transform 0.8s cubic-bezier(.4,0,.2,1);
    will-change: opacity, transform;
  }
  .fade-in-section.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .backdrop-blur-sm {
    transition: opacity 0.3s ease-in-out, backdrop-filter 0.3s ease-in-out;
    opacity: 0;
    backdrop-filter: blur(0);
  }
  
  .backdrop-blur-sm.open {
    opacity: 1;
    backdrop-filter: blur(4px);
  }

  .mobile-menu-transition {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 0;
    transform: translateX(100%);
    box-shadow: -4px 0 10px rgba(0, 0, 0, 0.1);
  }
  
  .mobile-menu-transition.open {
    opacity: 1;
    transform: translateX(0);
    animation: menuSlideIn 0.3s ease-out forwards;
  }
  
  @keyframes menuSlideIn {
    0% {
      transform: translateX(100%);
      opacity: 0;
    }
    100% {
      transform: translateX(0);
      opacity: 1;
    }
  }

  .footer-whatsapp-btn {
    background: #800020;
    color: #fff;
    border-radius: 0.5rem;
    padding: 0.5rem 1rem;
    display: inline-flex;
    align-items: center;
    font-weight: 500;
    box-shadow: 0 1px 3px 0 rgba(128,0,32,0.05);
    transition: background 0.2s, box-shadow 0.2s;
  }
  .footer-whatsapp-btn:hover, .footer-whatsapp-btn:focus {
    background: #B84C63;
    color: #fff;
    box-shadow: 0 4px 12px 0 rgba(128,0,32,0.12);
    outline: none;
  }
  .footer-whatsapp-btn svg {
    margin-right: 0.5rem;
    min-width: 20px;
    min-height: 20px;
  }

  .footer-copyright {
    color: #F8F9FA;
    font-size: 0.875rem;
    letter-spacing: 0.01em;
    margin-bottom: 1rem;
    text-align: center;
    font-weight: 500;
  }

  .card-header {
    @apply pb-3 mb-4 border-b border-[#F7E7EA] font-semibold text-[#800020] text-lg;
  }

  .card-action {
    @apply text-[#FF4081] font-semibold text-sm mt-2 inline-block;
  }

  .loading {
    @apply inline-block w-6 h-6 border-2 border-[#FFF0F5] rounded-full border-t-[#FF4081] animate-spin;
  }

  .gradient-header {
    background: linear-gradient(135deg, #800020, #B84C63);
    @apply text-white p-6 rounded-xl relative overflow-hidden;
  }

/* Class pour aprÃ¨s l'Ã©lÃ©ment gradient-header */
.gradient-header::after {
  content: "";
  @apply absolute top-0 right-0 w-24 h-24 rounded-full opacity-10 translate-x-1/3 -translate-y-1/3;
  background: #FF4081;
}
}
```

## FILE: src/app/contact/page.tsx
```typescript
"use client";
import React from "react";
import { MapPin, Phone, Smartphone, Mail } from "lucide-react";


const ContactPage = () => {
  return (
    <main className="p-4 md:p-8 bg-[var(--medical-background)] min-h-screen flex flex-col items-center">
      <div className="w-full max-w-4xl mx-auto">

      <h1 className="text-[var(--primary-bordeaux)] text-2xl font-bold mb-4">
        Nous Contacter et Informations du Laboratoire
      </h1>
      <section className="mt-8">
        <h2 className="text-2xl font-semibold text-[var(--bordeaux-dark)] mb-4">
          CoordonnÃ©es du Laboratoire
        </h2>
        <div className="space-y-4 bg-white rounded-xl shadow p-6 border border-[var(--gray-200)] max-w-xl">
          <a
            href="https://maps.app.goo.gl/NUiSsY2AQjeNHcDeA"
            target="_blank"
            rel="noopener noreferrer"
            className="flex items-center text-base text-[var(--gray-800)] hover:text-[var(--primary-bordeaux)] transition-colors group"
          >
            <span className="mr-2 text-[var(--primary-bordeaux)]">
              <MapPin size={20} />
            </span>
            <span>
              <strong>Adresse :</strong> 61 Bis, Rue de Marrakech, 80020, Agadir
            </span>
          </a>
          <a
            href="tel:0528843384"
            className="flex items-center text-base text-[var(--gray-800)] hover:text-[var(--primary-bordeaux)] transition-colors group"
          >
            <span className="mr-2 text-[var(--primary-bordeaux)]">
              <Phone size={20} />
            </span>
            <span>
              <strong>Fixe :</strong> 0528843384
            </span>
          </a>
          <div className="flex flex-col gap-2">
            <div className="flex items-center text-base text-[var(--gray-800)] gap-2">
              <span className="mr-2 text-[var(--accent-fuchsia)]">
                <Smartphone size={20} />
              </span>
              <strong>WhatsApp :</strong>
              <a
                href="https://wa.me/2120634293900"
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center gap-2 px-3 py-1.5 rounded-lg font-semibold btn-primary shadow hover:scale-105 transition-transform text-white"
                style={{ background: 'var(--accent-fuchsia)' }}
              >
                0634293900
              </a>
              <a
                href="https://wa.me/2120707291873"
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center gap-2 px-3 py-1.5 rounded-lg font-semibold btn-primary shadow hover:scale-105 transition-transform text-white"
                style={{ background: 'var(--accent-fuchsia)' }}
              >
                0707291873
              </a>
            </div>
            <a
              href="tel:0664727681"
              className="flex items-center text-base text-[var(--gray-800)] hover:text-[var(--accent-fuchsia)] transition-colors group mt-2"
            >
              <span className="mr-2 text-[var(--accent-fuchsia)]">
                <Smartphone size={20} />
              </span>
              <span>
                <strong>SociÃ©tÃ©s et autres :</strong> 0664727681
              </span>
            </a>
          </div>
          <a
            href="mailto:laboelallali@gmail.com"
            className="flex items-center text-base text-[var(--gray-800)] hover:text-[var(--primary-bordeaux)] transition-colors group"
          >
            <span className="mr-2 text-[var(--primary-bordeaux)]">
              <Mail size={20} />
            </span>
            <span>
              <strong>Email :</strong> laboelallali@gmail.com
            </span>
          </a>
          <div className="flex items-center text-base text-[var(--gray-800)] mt-1">
            <span className="mr-2 text-[var(--primary-bordeaux)]">
              <Phone size={20} />
            </span>
            <span>
              <strong>Fax :</strong> 0528828758
            </span>
          </div>
        </div>
      </section>
      <section className="mt-8">
        <h2 className="text-2xl font-semibold text-[var(--bordeaux-dark)] mb-4">
          Horaires d&apos;Ouverture
        </h2>
        <div className="inline-block bg-white rounded-lg px-4 py-2 border border-[var(--gray-200)]">
          <div className="flex flex-col gap-1 text-base text-[var(--gray-800)]">
            <span><span className="font-medium">Lun-Sam :</span> 7h30 - 18h30</span>
            <span><span className="font-medium">Dim :</span> 08h00 - 18h00</span>
          </div>
        </div>
      </section>
      <section className="mt-8">
        <h2 className="text-2xl font-semibold text-[var(--bordeaux-dark)] mb-4">
          Notre Emplacement
        </h2>
        <div className="w-full h-64 md:h-80 rounded-lg border border-[var(--gray-300)] bg-[var(--gray-200)] overflow-hidden mb-4 relative flex items-center justify-center">
          <MapPin size={48} className="text-gray-500" />
          <span className="ml-2 text-gray-500">Carte non disponible</span>
        </div>
        <div className="flex flex-col sm:flex-row gap-3 mt-2">
          <a
            href="https://maps.app.goo.gl/NUiSsY2AQjeNHcDeA"
            target="_blank"
            rel="noopener noreferrer"
            className="px-6 py-2 bg-[var(--primary-bordeaux)] text-white font-semibold rounded-lg shadow hover:bg-[var(--bordeaux-dark)] transition-colors text-center"
          >
            Ouvrir dans Google Maps
          </a>
          <a
            href="https://www.google.com/maps/dir/?api=1&destination=61+Bis+Rue+de+Marrakech+80020+Agadir"
            target="_blank"
            rel="noopener noreferrer"
            className="px-6 py-2 bg-[var(--accent-fuchsia)] text-white font-semibold rounded-lg shadow hover:bg-pink-700 transition-colors text-center"
          >
            Naviguer vers le labo
          </a>
        </div>
      </section>
      </div>
    </main>
  );
};

export default ContactPage;

```

## FILE: src/app/glabo/layout.tsx
```typescript
export const metadata = {
  title: 'Next.js',
  description: 'Generated by Next.js',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}

```

## FILE: src/app/glabo/page.tsx
```typescript
"use client";

import React, { useState, useEffect } from "react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { fr, ar } from "date-fns/locale";
import { format } from "date-fns";
import { useTranslation } from 'react-i18next';
import { useParams } from 'next/navigation';

const GlaboPage = () => {
  const params = useParams();
  const { t, i18n } = useTranslation(['common']);
  const currentLang = params.lang as string || 'fr';
  
  const [nom, setNom] = useState('');
  const [telephone, setTelephone] = useState('');
  const [email, setEmail] = useState('');
  const [adresse, setAdresse] = useState('');
  const [lieuPrelevement, setLieuPrelevement] = useState('domicile'); // 'domicile' ou 'travail'
  const [instructionsAcces, setInstructionsAcces] = useState(''); // Pour code d'immeuble, etc.
  const [geolocStatus, setGeolocStatus] = useState(''); // Pour afficher "Chargement...", "Erreur...", ou l'adresse trouvÃ©e
  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());
  const [selectedTime, setSelectedTime] = useState('');
  const [hasOrdonnance, setHasOrdonnance] = useState('non'); // 'oui' ou 'non'
  const [commentaires, setCommentaires] = useState('');
  
  // Set i18n language
  useEffect(() => {
    if (i18n.language !== currentLang) {
      i18n.changeLanguage(currentLang);
    }
  }, [currentLang, i18n]);

  // GÃ©nÃ¨re les crÃ©neaux horaires disponibles en fonction du jour sÃ©lectionnÃ©
  function generateTimeSlots(date: Date | null): string[] {
    if (!date) return [];
    const day = date.getDay(); // 0=dimanche, 6=samedi
    const startHour = 7, startMinute = 30;
    let endHour, endMinute;
    if (day === 6) { // samedi
      endHour = 12;
      endMinute = 0;
    } else {
      endHour = 18;
      endMinute = 30;
    }
    const slots: string[] = [];
    let h = startHour, m = startMinute;
    while (h < endHour || (h === endHour && m <= endMinute - 15)) {
      const hh = h.toString().padStart(2, '0');
      const mm = m.toString().padStart(2, '0');
      slots.push(`${hh}:${mm}`);
      m += 15;
      if (m === 60) {
        m = 0;
        h++;
      }
    }
    return slots;
  }

  const timeSlots = generateTimeSlots(selectedDate);

  // Fonction de gÃ©olocalisation
  const handleGeolocate = () => {
    // VÃ©rifie si la gÃ©olocalisation est supportÃ©e par le navigateur
    if (!navigator.geolocation) {
      setGeolocStatus(t('geolocation_not_supported', "La gÃ©olocalisation n'est pas supportÃ©e par votre navigateur."));
      return;
    }
    
    // Affiche le statut de chargement
    setGeolocStatus(t('loading_location', "Chargement de la localisation..."));
    
    // Options pour la gÃ©olocalisation (haute prÃ©cision, timeout de 10s)
    const options = {
      enableHighAccuracy: true,
      timeout: 10000,
      maximumAge: 0
    };
    
    // Fonction de succÃ¨s
    const success = (position: GeolocationPosition) => {
      const latitude = position.coords.latitude;
      const longitude = position.coords.longitude;
      
      // CrÃ©er un lien Google Maps avec les coordonnÃ©es
      const googleMapsLink = `https://www.google.com/maps?q=${latitude},${longitude}`;
      
      setGeolocStatus(t('location_found', "Localisation approximative trouvÃ©e."));
      setAdresse(t('coordinates_text', `CoordonnÃ©es : Lat: {{lat}}, Lon: {{lon}}\nLien Google Maps: {{link}}\nVeuillez complÃ©ter votre adresse ci-dessus si nÃ©cessaire.`, {
        lat: latitude.toFixed(6),
        lon: longitude.toFixed(6),
        link: googleMapsLink
      }));
    };
    
    // Fonction d'erreur
    const error = (err: GeolocationPositionError) => {
      let errorMessage = "";
      switch (err.code) {
        case err.PERMISSION_DENIED:
          errorMessage = t('permission_denied', "Vous avez refusÃ© l'accÃ¨s Ã  votre position.");
          break;
        case err.POSITION_UNAVAILABLE:
          errorMessage = t('position_unavailable', "Les informations de localisation ne sont pas disponibles.");
          break;
        case err.TIMEOUT:
          errorMessage = t('timeout', "La demande de localisation a expirÃ©.");
          break;
        default:
          errorMessage = t('unknown_error', `Erreur inconnue: {{message}}`, { message: err.message });
      }
      setGeolocStatus(t('geolocation_error', `Erreur de gÃ©olocalisation: {{errorMessage}}`, { errorMessage }));
    };
    
    // Lance la gÃ©olocalisation
    navigator.geolocation.getCurrentPosition(success, error, options);
  };

  // Soumission du formulaire : gÃ©nÃ¨re un mailto: avec toutes les infos
  const laboWhatsapp = "212654079592"; // NumÃ©ro en format international sans +
  
  // Fonction pour extraire le lien Google Maps des coordonnÃ©es, s'il existe
  const extractGoogleMapsLink = (addressText: string): string | null => {
    const googleMapsLinkMatch = addressText.match(/https:\/\/www\.google\.com\/maps\?q=[-+]?[0-9]*\.?[0-9]+,[-+]?[0-9]*\.?[0-9]+/);
    return googleMapsLinkMatch ? googleMapsLinkMatch[0] : null;
  };

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    // Validation simple
    if (!nom.trim() || !telephone.trim() || !selectedDate || !selectedTime) {
      alert(t('required_fields_alert', "Veuillez remplir tous les champs obligatoires (nom, tÃ©lÃ©phone, date, heure)."));
      return;
    }
    
    // Formatage de la date
    const formattedDate = selectedDate ? format(selectedDate, "dd/MM/yyyy") : "";
    const laboEmail = "laboelallali@gmail.com";
    const sujet = t('glabo_request_subject', `Demande de PrÃ©lÃ¨vement GLABO - {{name}}`, { name: nom });
    
    // Extraction du lien Google Maps s'il existe dans l'adresse
    const googleMapsLink = extractGoogleMapsLink(adresse);
    
    // Formattage de l'adresse pour le message
    let formattedAddress = adresse;
    if (googleMapsLink) {
      // Si un lien Google Maps est trouvÃ©, le mettre en Ã©vidence pour le staff du laboratoire
      formattedAddress = adresse.replace(googleMapsLink, 
        `${googleMapsLink} â‡– ${t('click_for_maps', "CLIQUEZ SUR CE LIEN POUR OUVRIR GOOGLE MAPS")}`);
    }
    
    // DÃ©terminer le texte du lieu de prÃ©lÃ¨vement
    const samplingPlaceText = lieuPrelevement === 'domicile' 
      ? t('at_home', 'Ã€ mon domicile')
      : t('at_work', 'Sur mon lieu de travail');
      
    // CrÃ©ation du message pour la demande GLABO
    const messageText = t('glabo_email_template', 
      `Bonjour,

Je souhaite demander un prÃ©lÃ¨vement Ã  domicile/travail (GLABO) :

Nom : {{name}}
TÃ©lÃ©phone : {{phone}}{{email}}
Lieu du prÃ©lÃ¨vement : {{samplingPlace}}
{{address}}{{accessInstructions}}
Date souhaitÃ©e : {{date}}
Heure souhaitÃ©e : {{time}}{{comments}}

{{prescription}}

Merci de me contacter pour confirmer les dÃ©tails.

Cordialement.`, 
      {
        name: nom,
        phone: telephone,
        email: email ? `\nEmail : ${email}` : '',
        samplingPlace: samplingPlaceText,
        address: formattedAddress ? `Adresse : ${formattedAddress}` : t('address_not_specified', 'Adresse non spÃ©cifiÃ©e (Ã  confirmer par tÃ©lÃ©phone).'),
        accessInstructions: instructionsAcces ? `\nInstructions d'accÃ¨s : ${instructionsAcces}` : '',
        date: formattedDate,
        time: selectedTime,
        comments: commentaires ? `\nCommentaires : ${commentaires}` : '',
        prescription: hasOrdonnance === 'oui' 
          ? t('have_prescription', `J'ai une ordonnance et je vous l'enverrai en piÃ¨ce jointe dans mon email.`)
          : t('no_prescription', "Je n'ai pas d'ordonnance.")
      }
    );
    
    // Fonction pour afficher l'alerte avec les instructions et le bouton de copie
    function showEmailAlert() {
      // Essayer de copier le texte dans le presse-papier
      const copyToClipboard = () => {
        try {
          navigator.clipboard.writeText(messageText).then(() => {
            alert("Message copiÃ© dans le presse-papier ! Vous pouvez maintenant le coller dans votre client email.");
          }).catch(() => {
            // Fallback si le navigateur n'autorise pas clipboard API
            showCopyInstructions();
          });
        } catch {
          // Fallback pour les navigateurs sans support de l'API clipboard
          showCopyInstructions();
        }
      };
      
      // Afficher les instructions pour la sÃ©lection manuelle
      const showCopyInstructions = () => {
        alert(`Veuillez envoyer un email Ã  : ${laboEmail}\n\nSujet : ${sujet}\n\nEt copiez ce message dans le corps de l'email :\n\n${messageText}`);
      };

      // Demander si l'utilisateur souhaite copier le message automatiquement
      if (confirm(`Il semble que l'ouverture automatique de votre client email n'a pas fonctionnÃ©.\n\nVoulez-vous copier le message dans le presse-papier ?\n(Cliquez sur OK pour copier, sur Annuler pour voir le message Ã  copier manuellement)`)) {
        copyToClipboard();
      } else {
        showCopyInstructions();
      }
    }
    
    // Essayer de lancer le client email natif
    try {
      const encodedBody = encodeURIComponent(messageText);
      const encodedSubject = encodeURIComponent(sujet);
      const mailtoLink = `mailto:${laboEmail}?subject=${encodedSubject}&body=${encodedBody}`;
      
      window.location.href = mailtoLink;
      
      setTimeout(() => {
        showEmailAlert();
      }, 500);
    } catch {
      showEmailAlert();
    }
  };

  // GÃ©nÃ¨re le lien WhatsApp avec message prÃ©rempli
  const handleWhatsapp = () => {
    if (!nom.trim() || !telephone.trim() || !selectedDate || !selectedTime) {
      alert("Veuillez remplir tous les champs obligatoires (nom, tÃ©lÃ©phone, date, heure).");
      return;
    }
    
    const formattedDate = selectedDate ? format(selectedDate, "dd/MM/yyyy") : "";
    
    // Extraction du lien Google Maps s'il existe dans l'adresse
    const googleMapsLink = extractGoogleMapsLink(adresse);
    
    // Formattage de l'adresse pour le message
    let formattedAddress = adresse;
    if (googleMapsLink) {
      // Si un lien Google Maps est trouvÃ©, le mettre en Ã©vidence pour le staff du laboratoire
      formattedAddress = adresse.replace(googleMapsLink, 
        `${googleMapsLink} â‡– ${t('click_for_maps', "CLIQUEZ SUR CE LIEN POUR OUVRIR GOOGLE MAPS")}`);
    }

    // DÃ©terminer le texte pour le lieu de prÃ©lÃ¨vement
    const samplingPlaceText = lieuPrelevement === 'domicile' 
      ? t('at_home', 'Ã€ mon domicile')
      : t('at_work', 'Sur mon lieu de travail');

    const placeSummary = lieuPrelevement === 'domicile' 
      ? t('home_sampling', 'Ã  domicile')
      : t('work_sampling', 'sur mon lieu de travail');
    
    // Construction du message WhatsApp avec traductions
    const message = t('whatsapp_message_template',
      `Bonjour, je souhaite demander un prÃ©lÃ¨vement {{place}} (GLABO).
Nom : {{name}}
TÃ©lÃ©phone : {{phone}}{{email}}
Lieu du prÃ©lÃ¨vement : {{samplingPlace}}
{{address}}{{accessInstructions}}
Date souhaitÃ©e : {{date}}
Heure souhaitÃ©e : {{time}}{{comments}}
{{prescription}}`,
      {
        place: placeSummary,
        name: nom,
        phone: telephone,
        email: email ? `\nEmail : ${email}` : '',
        samplingPlace: samplingPlaceText,
        address: formattedAddress ? `Adresse : ${formattedAddress}` : t('address_not_specified', 'Adresse non spÃ©cifiÃ©e (Ã  confirmer par tÃ©lÃ©phone).'),
        accessInstructions: instructionsAcces ? `\nInstructions d'accÃ¨s : ${instructionsAcces}` : '',
        date: formattedDate,
        time: selectedTime,
        comments: commentaires ? `\nCommentaires : ${commentaires}` : '',
        prescription: hasOrdonnance === 'oui' 
          ? t('have_prescription_whatsapp', `Je dispose d'une ordonnance que je vous enverrai sÃ©parÃ©ment par WhatsApp.`)
          : t('no_prescription', "Je n'ai pas d'ordonnance.")
      }
    );
    
    const whatsappLink = `https://wa.me/${laboWhatsapp}?text=${encodeURIComponent(message)}`;
    window.open(whatsappLink, '_blank');
  };

  // Gestion de la sÃ©lection de l'option ordonnance
  const handleOrdonnanceChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setHasOrdonnance(e.target.value);
  };

  // DÃ©terminer la locale pour le DatePicker en fonction de la langue
  const dateLocale = currentLang === 'ar' ? ar : fr;
  const isRTL = currentLang === 'ar';
  
  return (
    <main className={`p-4 md:p-8 font-sans ${isRTL ? 'rtl' : 'ltr'}`}>
      <h1 className="text-3xl font-bold text-[var(--primary-bordeaux)] mb-6 font-['Inter','Public Sans',sans-serif]">
        {t('glabo_title', 'Demander un prÃ©lÃ¨vement Ã  domicile ou au travail (GLABO)')}
      </h1>
      <form className="max-w-lg mx-auto" onSubmit={handleSubmit}>
        {/* Nom complet */}
        <div className="mb-4">
          <label htmlFor="nomComplet" className="block text-sm font-medium text-[var(--primary-bordeaux)] mb-1">
            {t('name', "Nom complet")}
          </label>
          <input
            type="text"
            id="nomComplet"
            name="nomComplet"
            className="w-full p-2 border border-[var(--gray-300)] rounded-md shadow-sm focus:ring-[var(--accent-fuchsia)] focus:border-[var(--accent-fuchsia)]"
            autoComplete="name"
            value={nom}
            onChange={e => setNom(e.target.value)}
          />
        </div>
        {/* NumÃ©ro de tÃ©lÃ©phone */}
        <div className="mb-4">
          <label htmlFor="telephone" className="block text-sm font-medium text-[var(--primary-bordeaux)] mb-1">
            {t('phone', "NumÃ©ro de tÃ©lÃ©phone")}
          </label>
          <input
            type="tel"
            id="telephone"
            name="telephone"
            className="w-full p-2 border border-[var(--gray-300)] rounded-md shadow-sm focus:ring-[var(--accent-fuchsia)] focus:border-[var(--accent-fuchsia)]"
            autoComplete="tel"
            inputMode="tel"
            value={telephone}
            onChange={e => setTelephone(e.target.value)}
          />
        </div>
        {/* Adresse email (optionnel) */}
        <div className="mb-4">
          <label htmlFor="email" className="block text-sm font-medium text-[var(--primary-bordeaux)] mb-1">
            {t('email', "Adresse e-mail")} ({t('optional', "optionnel")})
          </label>
          <input
            type="email"
            id="email"
            name="email"
            className="w-full p-2 border border-[var(--gray-300)] rounded-md shadow-sm focus:ring-[var(--accent-fuchsia)] focus:border-[var(--accent-fuchsia)]"
            autoComplete="email"
            value={email}
            onChange={e => setEmail(e.target.value)}
          />
        </div>
        {/* Lieu du prÃ©lÃ¨vement */}
        <div className="mb-4">
          <label htmlFor="lieuPrelevement" className="block text-sm font-medium text-[var(--primary-bordeaux)] mb-1">
            {t('sampling_place', "Lieu de prÃ©lÃ¨vement")}
          </label>
          <select
            id="lieuPrelevement"
            name="lieuPrelevement"
            value={lieuPrelevement}
            onChange={e => setLieuPrelevement(e.target.value)}
            className="w-full p-2 border border-[var(--gray-300)] rounded-md shadow-sm focus:ring-[var(--accent-fuchsia)] focus:border-[var(--accent-fuchsia)]"
          >
            <option value="domicile">{t('at_home', "Ã€ mon domicile")}</option>
            <option value="travail">{t('at_work', "Sur mon lieu de travail")}</option>
          </select>
        </div>
        {/* Adresse de prÃ©lÃ¨vement (optionnel) */}
        <div className="mb-4">
          <label htmlFor="adresse" className="block text-sm font-medium text-[var(--primary-bordeaux)] mb-1">
            {t('address_instructions', "Adresse (indiquez pour le prÃ©lÃ¨vement)")}
          </label>
          <textarea
            id="adresse"
            name="adresse"
            rows={2}
            className="w-full p-2 border border-[var(--gray-300)] rounded-md shadow-sm focus:ring-[var(--accent-fuchsia)] focus:border-[var(--accent-fuchsia)]"
            value={adresse}
            onChange={e => setAdresse(e.target.value)}
          />
          <button 
            type="button" 
            onClick={handleGeolocate}
            className="text-sm text-[var(--accent-fuchsia)] hover:underline mt-2 flex items-center gap-1"
          >
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4">
              <path strokeLinecap="round" strokeLinejoin="round" d="M15 10.5a3 3 0 11-6 0 3 3 0 016 0z" />
              <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z" />
            </svg>
            {t('locate_position', "Localisez-moi (Optionnel)")}
          </button>
          {geolocStatus && (
            <p className="text-xs text-gray-600 mt-1">{geolocStatus}</p>
          )}
        </div>
        {/* Instructions d'accÃ¨s (optionnel) */}
        <div className="mb-4">
          <label htmlFor="instructionsAcces" className="block text-sm font-medium text-[var(--primary-bordeaux)] mb-1">
            {t('access_instructions', "Instructions d'accÃ¨s (code immeuble, Ã©tage, etc.")} - {t('optional', "optionnel")}
          </label>
          <input
            type="text"
            id="instructionsAcces"
            name="instructionsAcces"
            className="w-full p-2 border border-[var(--gray-300)] rounded-md shadow-sm focus:ring-[var(--accent-fuchsia)] focus:border-[var(--accent-fuchsia)]"
            value={instructionsAcces}
            onChange={e => setInstructionsAcces(e.target.value)}
          />
        </div>
        {/* Date souhaitÃ©e */}
        <div className="mb-4">
          <label htmlFor="date" className="block text-sm font-medium text-[var(--primary-bordeaux)] mb-1">
            {t('desired_date', "Date souhaitÃ©e")}
          </label>
          <DatePicker
            id="date"
            selected={selectedDate}
            onChange={(date: Date | null) => setSelectedDate(date)}
            dateFormat="dd/MM/yyyy"
            minDate={new Date()}
            locale={dateLocale}
            placeholderText={t('date_placeholder', "SÃ©lectionnez une date")}
            className="w-full p-2 border border-[var(--gray-300)] rounded-md shadow-sm focus:ring-[var(--accent-fuchsia)] focus:border-[var(--accent-fuchsia)]"
          />
        </div>
        {/* Heure souhaitÃ©e */}
        <div className="mb-4">
          <label htmlFor="heure" className="block text-sm font-medium text-[var(--primary-bordeaux)] mb-1">
            {t('desired_time', "Heure souhaitÃ©e")}
          </label>
          <select
            id="heure"
            name="heure"
            value={selectedTime}
            onChange={e => setSelectedTime(e.target.value)}
            className="w-full p-2 border border-[var(--gray-300)] rounded-md shadow-sm focus:ring-[var(--accent-fuchsia)] focus:border-[var(--accent-fuchsia)]"
          >
            <option value="" disabled>{t('choose_time', "-- Choisissez une heure --")}</option>
            {timeSlots.map((slot) => (
              <option key={slot} value={slot}>{slot}</option>
            ))}
          </select>
        </div>
        {/* Ordonnance (optionnel) */}
        <div className="mb-4">
          <label htmlFor="ordonnance" className="block text-sm font-medium text-[var(--primary-bordeaux)] mb-1">
            {t('prescription_question', "Avez-vous une ordonnance ?")}
          </label>
          <select
            id="ordonnance"
            name="ordonnance"
            value={hasOrdonnance}
            onChange={handleOrdonnanceChange}
            className="w-full p-2 border border-[var(--gray-300)] rounded-md shadow-sm focus:ring-[var(--accent-fuchsia)] focus:border-[var(--accent-fuchsia)]"
          >
            <option value="non">{t('no', "Non")}</option>
            <option value="oui">{t('yes', "Oui")}</option>
          </select>
          {hasOrdonnance === 'oui' && (
            <p className="text-xs text-gray-500 mt-1">
              {t('prescription_note', "Note : N'oubliez pas de joindre votre ordonnance lors de l'envoi de votre email ou message WhatsApp.")}
            </p>
          )}
        </div>
        {/* Commentaires (optionnel) */}
        <div className="mb-4">
          <label htmlFor="commentaires" className="block text-sm font-medium text-[var(--primary-bordeaux)] mb-1">
            {t('comments', "Notes ou commentaires supplÃ©mentaires")} ({t('optional', "optionnel")})
          </label>
          <textarea
            id="commentaires"
            name="commentaires"
            rows={3}
            className="w-full p-2 border border-[var(--gray-300)] rounded-md shadow-sm focus:ring-[var(--accent-fuchsia)] focus:border-[var(--accent-fuchsia)]"
            value={commentaires}
            onChange={e => setCommentaires(e.target.value)}
          />
        </div>
        {/* Boutons de soumission */}
        <div className="flex flex-col md:flex-row gap-3 justify-end">
          <button
            type="submit"
            className="bg-[var(--accent-fuchsia)] text-white font-semibold py-2 px-4 rounded-lg hover:bg-[var(--fuchsia-bright)] transition-colors w-full md:w-auto flex items-center justify-center gap-2"
          >
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
              <path strokeLinecap="round" strokeLinejoin="round" d="M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75" />
            </svg>
            {t('send_request_email', "Envoyer ma demande de prÃ©lÃ¨vement par email")}
          </button>
          <button
            type="button"
            onClick={handleWhatsapp}
            className="bg-green-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-green-600 transition-colors w-full md:w-auto flex items-center justify-center gap-2"
            aria-label="Demander prÃ©lÃ¨vement par WhatsApp"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16" className="w-5 h-5">
              <path d="M13.601 2.326A7.854 7.854 0 0 0 7.994 0C3.627 0 .068 3.558.064 7.926c0 1.399.366 2.76 1.057 3.965L0 16l4.204-1.102a7.933 7.933 0 0 0 3.79.965h.004c4.368 0 7.926-3.558 7.93-7.93A7.898 7.898 0 0 0 13.6 2.326zM7.994 14.521a6.573 6.573 0 0 1-3.356-.92l-.24-.144-2.494.654.666-2.433-.156-.251a6.56 6.56 0 0 1-1.007-3.505c0-3.626 2.957-6.584 6.591-6.584a6.56 6.56 0 0 1 4.66 1.931 6.557 6.557 0 0 1 1.928 4.66c-.004 3.639-2.961 6.592-6.592 6.592zm3.615-4.934c-.197-.099-1.17-.578-1.353-.646-.182-.065-.315-.099-.445.099-.133.197-.513.646-.627.775-.114.133-.232.148-.43.05-.197-.1-.836-.308-1.592-.985-.59-.525-.985-1.175-1.103-1.372-.114-.198-.011-.304.088-.403.087-.088.197-.232.296-.346.1-.114.133-.198.198-.33.065-.134.034-.248-.015-.347-.05-.099-.445-1.076-.612-1.47-.16-.389-.323-.335-.445-.34-.114-.007-.247-.007-.38-.007a.729.729 0 0 0-.529.247c-.182.198-.691.677-.691 1.654 0 .977.71 1.916.81 2.049.098.133 1.394 2.132 3.383 2.992.47.205.84.326 1.129.418.475.152.904.129 1.246.08.38-.058 1.171-.48 1.338-.943.164-.464.164-.86.114-.943-.049-.084-.182-.133-.38-.232z"/>
            </svg>
            {t('send_whatsapp', "Demander prÃ©lÃ¨vement par WhatsApp")}
          </button>
        </div>
        {/* Rappel ordonnance */}
        <div className="mt-4 text-sm text-[var(--primary-bordeaux)] bg-[var(--gray-100)] rounded-lg px-4 py-2 border border-[var(--gray-300)]">
          <strong>{t('reminder', "Rappel")}&nbsp;:</strong> {t('prescription_reminder', "Si vous avez une ordonnance, n'oubliez pas de l'attacher Ã  votre email ou Ã  votre message WhatsApp")}!
        </div>
      </form>
    </main>
  );
};

export default GlaboPage;

```

## FILE: src/app/rendez-vous/page.tsx
```typescript
"use client";

import React, { useState, useEffect } from "react";
import DatePicker from "react-datepicker";
import { fr, ar } from "date-fns/locale";
import { format } from "date-fns";
import { useTranslation } from "react-i18next";
import { useParams } from "next/navigation";
import { supportedLngs } from "../../../i18n";

const RendezVousPage = () => {
  // RÃ©cupÃ©rer la langue actuelle depuis l'URL
  const params = useParams();
  const { t, i18n } = useTranslation(['common', 'appointment']);
  
  // DÃ©terminer la langue Ã  partir des paramÃ¨tres d'URL
  const lang = typeof params.lang === 'string' && supportedLngs.includes(params.lang) 
    ? params.lang 
    : i18n.language || 'fr';
    
  // Mettre Ã  jour la langue i18n si nÃ©cessaire
  useEffect(() => {
    if (i18n.language !== lang) {
      i18n.changeLanguage(lang);
    }
  }, [lang, i18n]);
  
  // Load React DatePicker CSS dynamically
  useEffect(() => {
    // Add DatePicker CSS
    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = 'https://cdnjs.cloudflare.com/ajax/libs/react-datepicker/4.15.0/react-datepicker.min.css';
    document.head.appendChild(link);

    return () => {
      // Clean up
      document.head.removeChild(link);
    };
  }, []);
  
  // DÃ©terminer la locale de date-fns en fonction de la langue
  const dateLocale = lang === 'ar' ? ar : fr;
  
  const [nom, setNom] = useState('');
  const [telephone, setTelephone] = useState('');
  const [email, setEmail] = useState('');
  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());
  const [selectedTime, setSelectedTime] = useState('');
  const [hasOrdonnance, setHasOrdonnance] = useState('non'); // 'oui' ou 'non'

  const [commentaires, setCommentaires] = useState('');

  // GÃ©nÃ¨re les crÃ©neaux horaires disponibles en fonction du jour sÃ©lectionnÃ©
  function generateTimeSlots(date: Date | null): string[] {
    if (!date) return [];
    const day = date.getDay(); // 0=dimanche, 6=samedi
    const startHour = 7, startMinute = 30;
    let endHour, endMinute;
    if (day === 6) { // samedi
      endHour = 12;
      endMinute = 0;
    } else {
      endHour = 18;
      endMinute = 30;
    }
    const slots: string[] = [];
    let h = startHour, m = startMinute;
    while (h < endHour || (h === endHour && m <= endMinute - 15)) {
      const hh = h.toString().padStart(2, '0');
      const mm = m.toString().padStart(2, '0');
      slots.push(`${hh}:${mm}`);
      m += 15;
      if (m === 60) {
        m = 0;
        h++;
      }
    }
    return slots;
  }

  const timeSlots = generateTimeSlots(selectedDate);

  // Soumission du formulaire : gÃ©nÃ¨re un mailto: avec toutes les infos
  
const laboWhatsapp = "212654079592"; // NumÃ©ro en format international sans +

const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    // Validation simple
    if (!nom.trim() || !telephone.trim() || !selectedDate || !selectedTime) {
      alert("Veuillez remplir tous les champs obligatoires (nom, tÃ©lÃ©phone, date, heure).");
      return;
    }
    // Formatage de la date
    const formattedDate = selectedDate ? format(selectedDate, "dd/MM/yyyy") : "";
    const laboEmail = "laboelallali@gmail.com";
    const sujet = `Demande de Rendez-vous - ${nom}`;
    
    // CrÃ©er le texte du message non-encodÃ© (lisible)
    const messageText = `Bonjour,

Je souhaite prendre un rendez-vous au laboratoire :

Nom : ${nom}
TÃ©lÃ©phone : ${telephone}${email ? `
Email : ${email}` : ''}
Date souhaitÃ©e : ${formattedDate}
Heure souhaitÃ©e : ${selectedTime}${commentaires ? `
Commentaires : ${commentaires}` : ''}
${hasOrdonnance === 'oui' ? `
Je dispose d'une ordonnance que je vous enverrai sÃ©parÃ©ment par WhatsApp.` : `Je n'ai pas d'ordonnance.`}

Merci.`;
    
    // Fonction pour afficher l'alerte avec les instructions et le bouton de copie
    function showEmailAlert() {
      // Essayer de copier le texte dans le presse-papier
      const copyToClipboard = () => {
        try {
          navigator.clipboard.writeText(messageText).then(() => {
            alert("Message copiÃ© dans le presse-papier ! Vous pouvez maintenant le coller dans votre client email.");
          }).catch(() => {
            // Fallback si le navigateur n'autorise pas clipboard API
            showCopyInstructions();
          });
        } catch {
          // Fallback pour les navigateurs sans support de l'API clipboard
          showCopyInstructions();
        }
      };
      
      // Afficher les instructions pour la sÃ©lection manuelle
      const showCopyInstructions = () => {
        alert(`Veuillez envoyer un email Ã  : ${laboEmail}\n\nSujet : ${sujet}\n\nEt copiez ce message dans le corps de l'email :\n\n${messageText}`);
      };

      // Demander si l'utilisateur souhaite copier le message automatiquement
      if (confirm(`Il semble que l'ouverture automatique de votre client email n'a pas fonctionnÃ©.\n\nVoulez-vous copier le message dans le presse-papier ?\n(Cliquez sur OK pour copier, sur Annuler pour voir le message Ã  copier manuellement)`)) {
        copyToClipboard();
      } else {
        showCopyInstructions();
      }
    }
    
    // Essayer de lancer le client email natif (pour les utilisateurs sur mobile ou avec client email configurÃ©)
    try {
      // Approche sÃ©curisÃ©e et simplifiÃ©e qui ne crÃ©e pas de fenÃªtre vide
      const encodedBody = encodeURIComponent(messageText);
      const encodedSubject = encodeURIComponent(sujet);
      const mailtoLink = `mailto:${laboEmail}?subject=${encodedSubject}&body=${encodedBody}`;
      
      // Utiliser l'API Location plutÃ´t que window.open pour Ã©viter les fenÃªtres vides
      window.location.href = mailtoLink;
      
      // Attendre un court instant puis afficher les instructions de secours
      setTimeout(() => {
        showEmailAlert();
      }, 500);
    } catch {
      // En cas d'erreur, afficher directement l'alerte
      showEmailAlert();
    }
  };

  // GÃ©nÃ¨re le lien WhatsApp avec message prÃ©rempli
  const handleWhatsapp = () => {
    if (!nom.trim() || !telephone.trim() || !selectedDate || !selectedTime) {
      alert("Veuillez remplir tous les champs obligatoires (nom, tÃ©lÃ©phone, date, heure).");
      return;
    }
    const formattedDate = selectedDate ? format(selectedDate, "dd/MM/yyyy") : "";
    const message = `Bonjour, je souhaite prendre un rendez-vous au laboratoire.\nNom : ${nom}\nTÃ©lÃ©phone : ${telephone}${email ? `\nEmail : ${email}` : ''}\nDate souhaitÃ©e : ${formattedDate}\nHeure souhaitÃ©e : ${selectedTime}${commentaires ? `\nCommentaires : ${commentaires}` : ''}`;
    const whatsappLink = `https://wa.me/${laboWhatsapp}?text=${encodeURIComponent(message)}`;
    window.open(whatsappLink, '_blank');
  };

  return (
    <main className="p-4 md:p-8 font-sans">
      <h1 className="text-3xl font-bold text-[var(--primary-bordeaux)] mb-6 font-['Inter','Public Sans',sans-serif]">
        {t('appointment')}
      </h1>
      <form className="max-w-lg mx-auto" onSubmit={handleSubmit}>
        {/* Nom complet */}
        <div className="mb-4">
          <label htmlFor="nomComplet" className="block text-sm font-medium text-[var(--primary-bordeaux)] mb-1">
            {t('fullName')}
          </label>
          <input
            type="text"
            id="nomComplet"
            name="nomComplet"
            className="w-full p-2 border border-[var(--gray-300)] rounded-md shadow-sm focus:ring-[var(--accent-fuchsia)] focus:border-[var(--accent-fuchsia)]"
            autoComplete="name"
            value={nom}
            onChange={e => setNom(e.target.value)}
          />
        </div>
        {/* NumÃ©ro de tÃ©lÃ©phone */}
        <div className="mb-4">
          <label htmlFor="telephone" className="block text-sm font-medium text-[var(--primary-bordeaux)] mb-1">
            {t('phoneNumber')}
          </label>
          <input
            type="tel"
            id="telephone"
            name="telephone"
            className="w-full p-2 border border-[var(--gray-300)] rounded-md shadow-sm focus:ring-[var(--accent-fuchsia)] focus:border-[var(--accent-fuchsia)]"
            autoComplete="tel"
            inputMode="tel"
            value={telephone}
            onChange={(e) => setTelephone(e.target.value)}
            required
          />
        </div>
        {/* Adresse email (optionnel) */}
        <div className="mb-4">
          <label htmlFor="email" className="block text-sm font-medium text-[var(--primary-bordeaux)] mb-1">
            {t('email')}
          </label>
          <input
            type="email"
            id="email"
            name="email"
            className="w-full p-2 border border-[var(--gray-300)] rounded-md shadow-sm focus:ring-[var(--accent-fuchsia)] focus:border-[var(--accent-fuchsia)]"
            autoComplete="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
        </div>
        {/* Date souhaitÃ©e */}
        <div className="mb-4">
          <label htmlFor="date" className="block text-sm font-medium text-[var(--primary-bordeaux)] mb-1">
            {t('desiredDate')}
          </label>
          <DatePicker
            id="date"
            selected={selectedDate}
            onChange={(date) => setSelectedDate(date)}
            dateFormat="dd/MM/yyyy"
            minDate={new Date()}
            locale={dateLocale}
            placeholderText="SÃ©lectionnez une date"
            className="w-full p-2 border border-[var(--gray-300)] rounded-md shadow-sm focus:ring-[var(--accent-fuchsia)] focus:border-[var(--accent-fuchsia)]"
            required
          />
        </div>
        {/* Heure souhaitÃ©e */}
        <div className="mb-4">
          <label htmlFor="heure" className="block text-sm font-medium text-[var(--primary-bordeaux)] mb-1">
            {t('desiredTime')}
          </label>
          <select
            id="heure"
            name="heure"
            value={selectedTime}
            onChange={(e) => setSelectedTime(e.target.value)}
            className="w-full p-2 border border-[var(--gray-300)] rounded-md shadow-sm focus:ring-[var(--accent-fuchsia)] focus:border-[var(--accent-fuchsia)]"
            required
          >
            <option value="">{t('chooseTime')}</option>
            {timeSlots.map((slot) => (
              <option key={slot} value={slot}>{slot}</option>
            ))}
          </select>
        </div>

        {/* Ordonnance */}
        <div className="mb-4">
          <label htmlFor="ordonnance" className="block text-sm font-medium text-[var(--primary-bordeaux)] mb-1">
            {t('prescription')}
          </label>
          <select
            id="ordonnance"
            name="ordonnance"
            value={hasOrdonnance}
            onChange={e => setHasOrdonnance(e.target.value)}
            className="w-full p-2 border border-[var(--gray-300)] rounded-md shadow-sm focus:ring-[var(--accent-fuchsia)] focus:border-[var(--accent-fuchsia)]"
          >
            <option value="non">{t('no')}</option>
            <option value="oui">{t('yes')}</option>
          </select>
          {hasOrdonnance === 'oui' && (
            <p className="text-xs text-gray-500 mt-1">
              Note : N&apos;oubliez pas de joindre votre ordonnance lors de l&apos;envoi de votre WhatsApp ou email.
            </p>
          )}
        </div>
        
        {/* Commentaires (optionnel) */}
        <div className="mb-4">
          <label htmlFor="commentaires" className="block text-sm font-medium text-[var(--primary-bordeaux)] mb-1">
            {t('comments')}
          </label>
          <textarea
            id="commentaires"
            name="commentaires"
            rows={3}
            className="w-full p-2 border border-[var(--gray-300)] rounded-md shadow-sm focus:ring-[var(--accent-fuchsia)] focus:border-[var(--accent-fuchsia)]"
            value={commentaires}
            onChange={e => setCommentaires(e.target.value)}
          />
        </div>
        {/* Boutons de soumission */}
        <div className="flex flex-col md:flex-row gap-3 justify-end">
          <button
            type="submit"
            className="bg-[var(--accent-fuchsia)] text-white font-semibold py-2 px-4 rounded-lg hover:bg-[var(--fuchsia-bright)] transition-colors w-full md:w-auto flex items-center justify-center gap-2"
          >
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
              <path strokeLinecap="round" strokeLinejoin="round" d="M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75" />
            </svg>
            {t('requestByEmail')}
          </button>
          <button
            type="button"
            onClick={handleWhatsapp}
            className="bg-green-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-green-600 transition-colors w-full md:w-auto flex items-center justify-center gap-2"
            aria-label="Demander RDV par WhatsApp"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16" className="w-5 h-5">
              <path d="M13.601 2.326A7.854 7.854 0 0 0 7.994 0C3.627 0 .068 3.558.064 7.926c0 1.399.366 2.76 1.057 3.965L0 16l4.204-1.102a7.933 7.933 0 0 0 3.79.965h.004c4.368 0 7.926-3.558 7.93-7.93A7.898 7.898 0 0 0 13.6 2.326zM7.994 14.521a6.573 6.573 0 0 1-3.356-.92l-.24-.144-2.494.654.666-2.433-.156-.251a6.56 6.56 0 0 1-1.007-3.505c0-3.626 2.957-6.584 6.591-6.584a6.56 6.56 0 0 1 4.66 1.931 6.557 6.557 0 0 1 1.928 4.66c-.004 3.639-2.961 6.592-6.592 6.592zm3.615-4.934c-.197-.099-1.17-.578-1.353-.646-.182-.065-.315-.099-.445.099-.133.197-.513.646-.627.775-.114.133-.232.148-.43.05-.197-.1-.836-.308-1.592-.985-.59-.525-.985-1.175-1.103-1.372-.114-.198-.011-.304.088-.403.087-.088.197-.232.296-.346.1-.114.133-.198.198-.33.065-.134.034-.248-.015-.347-.05-.099-.445-1.076-.612-1.47-.16-.389-.323-.335-.445-.34-.114-.007-.247-.007-.38-.007a.729.729 0 0 0-.529.247c-.182.198-.691.677-.691 1.654 0 .977.71 1.916.81 2.049.098.133 1.394 2.132 3.383 2.992.47.205.84.326 1.129.418.475.152.904.129 1.246.08.38-.058 1.171-.48 1.338-.943.164-.464.164-.86.114-.943-.049-.084-.182-.133-.38-.232z"/>
            </svg>
            {t('requestByWhatsApp')}
          </button>
        </div>
        
      </form>
    </main>
  );
};

export default RendezVousPage;

```

## FILE:  (NOT FOUND)

## FILE: src/components/layout/Footer.tsx
```typescript
"use client";

import Link from 'next/link';
import dynamic from 'next/dynamic';
import { Phone, Mail, MapPin, Clock, ChevronRight } from 'lucide-react';
import { useTranslation } from 'react-i18next';
import { 
  LAB_NAME, 
  LAB_ADDRESS, 
  LAB_CONTACT, 
  LAB_HOURS 
} from '@/constants/contact';

// Dynamically import the PWA install button with SSR disabled
const PWAInstallButton = dynamic(
  () => import('@/components/features/pwa/PWAInstallButton').then(mod => mod.default),
  { ssr: false }
);

const Footer = () => {
  const { t } = useTranslation('common');
  const { i18n } = useTranslation();
  const isRTL = i18n.language === 'ar';
  const currentYear = new Date().getFullYear();
  
  return (
    <footer className="footer-gradient text-white pt-12 pb-8 mt-4">
      <div className="container mx-auto px-4">
        <div className="w-full h-1 mb-4 bg-gradient-to-r from-[#800020]/70 via-[#B84C63]/70 to-[#FF4081]/70 rounded-full"></div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 text-sm sm:text-base">
          {/* Contact Info */}
          <div>
            <h3 className="text-xl font-bold mb-4">{t('contact')}</h3>
            <ul className="space-y-3">
              <li className="flex items-start space-x-3">
                <MapPin size={20} className="flex-shrink-0 text-white mt-0.5" />
                <span>{t(LAB_ADDRESS)}</span>
              </li>
              <li className="flex flex-col">
                <div className="flex items-start space-x-3 mb-1">
                  <Phone size={20} className="flex-shrink-0 text-white mt-0.5" />
                  <span className="font-semibold">{t('lab_contact')}</span>
                </div>
                <div className={`${isRTL ? 'mr-7' : 'ml-7'}`}>
                  <p>{t('landline_label')} <a href={LAB_CONTACT.LANDLINE.url} className="hover:underline">{LAB_CONTACT.LANDLINE.display}</a></p>
                  {LAB_CONTACT.WHATSAPP.map((whatsapp, index) => (
                    <p key={index}>
                      {t('whatsapp_label')} <a href={whatsapp.url} className="hover:underline">{whatsapp.display}</a>
                    </p>
                  ))}
                  <p>{t('companies_label')} <a href={LAB_CONTACT.COMPANIES.url} className="hover:underline">{LAB_CONTACT.COMPANIES.display}</a></p>
                  <p>{t('fax_label')} {LAB_CONTACT.FAX}</p>
                </div>
              </li>
              <li className="flex items-start space-x-3">
                <Mail size={20} className="flex-shrink-0 text-white mt-0.5" />
                <div className="flex flex-col">
                  <a href={LAB_CONTACT.EMAIL.url} className="hover:underline">
                    {LAB_CONTACT.EMAIL.display}
                  </a>
                </div>
              </li>
              <li className="flex items-start space-x-3">
                <Clock size={20} className="flex-shrink-0 text-white mt-0.5" />
                <div>
                  <p>{LAB_HOURS.WEEKDAYS}</p>
                  <p>{LAB_HOURS.SUNDAY}</p>
                </div>
              </li>
            </ul>
          </div>

          {/* Quick Links */}
          <div>
            <h3 className="text-xl font-bold mb-4">{t('quick_links')}</h3>
            <ul className="space-y-2">
              <li>
                <Link href="/" className="flex items-center space-x-2 hover:text-[#FF4081] transition-colors min-h-[44px] py-2">
                  <ChevronRight size={16} className="w-4 h-4" />
                  <span>{t('home')}</span>
                </Link>
              </li>
              <li>
                <Link href="#services" className="flex items-center space-x-2 hover:text-[#FF4081] transition-colors min-h-[44px] py-2">
                  <ChevronRight size={16} className="w-4 h-4" />
                  <span>{t('our_main_services')}</span>
                </Link>
              </li>
              <li>
                <Link href="#info" className="flex items-center space-x-2 hover:text-[#FF4081] transition-colors min-h-[44px] py-2">
                  <ChevronRight size={16} className="w-4 h-4" />
                  <span>{t('practical_info')}</span>
                </Link>
              </li>
              <li>
                <Link href="#contact" className="flex items-center space-x-2 hover:text-[#FF4081] transition-colors min-h-[44px] py-2">
                  <ChevronRight size={16} className="w-4 h-4" />
                  <span>{t('contact')}</span>
                </Link>
              </li>
              <li>
                <Link href="#faq" className="flex items-center space-x-2 hover:text-[#FF4081] transition-colors min-h-[44px] py-2">
                  <ChevronRight size={16} className="w-4 h-4" />
                  <span>{t('faq')}</span>
                </Link>
              </li>
            </ul>
          </div>

          {/* About Us */}
          <div>
            <h3 className="text-xl font-bold mb-4">{t('about')}</h3>
            <p className="mb-4">
              {t('about_description')}
            </p>
            <div className="space-y-4">
              <a 
                href={LAB_CONTACT.WHATSAPP[0].url} 
                target="_blank" 
                rel="noopener noreferrer"
                className="bg-[#800020] hover:bg-[#B84C63] text-white px-6 py-3 rounded-lg inline-flex items-center justify-center space-x-2 transition-colors shadow-sm hover:shadow-md w-full sm:w-auto"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="white" viewBox="0 0 16 16" className="flex-shrink-0">
                  <path d="M13.601 2.326A7.854 7.854 0 0 0 7.994 0C3.627 0 .068 3.558.064 7.926c0 1.399.366 2.76 1.057 3.965L0 16l4.204-1.102a7.933 7.933 0 0 0 3.79.965h.004c4.368 0 7.926-3.558 7.93-7.93A7.898 7.898 0 0 0 13.6 2.326zM7.994 14.521a6.573 6.573 0 0 1-3.356-.92l-.24-.144-2.494.654.666-2.433-.156-.251a6.56 6.56 0 0 1-1.007-3.505c0-3.626 2.957-6.584 6.591-6.584a6.56 6.56 0 0 1 4.66 1.931 6.557 6.557 0 0 1 1.928 4.66c-.004 3.639-2.961 6.592-6.592 6.592zm3.615-4.934c-.197-.099-1.17-.578-1.353-.646-.182-.065-.315-.099-.445.099-.133.197-.513.646-.627.775-.114.133-.232.148-.43.05-.197-.1-.836-.308-1.592-.985-.59-.525-.985-1.175-1.103-1.372-.114-.198-.011-.304.088-.403.087-.088.197-.232.296-.346.1-.114.133-.198.198-.33.065-.134.034-.248-.015-.347-.05-.099-.445-1.076-.612-1.47-.16-.389-.323-.335-.445-.34-.114-.007-.247-.007-.38-.007a.729.729 0 0 0-.529.247c-.182.198-.691.677-.691 1.654 0 .977.71 1.916.81 2.049.098.133 1.394 2.132 3.383 2.992.47.205.84.326 1.129.418.475.152.904.129 1.246.08.38-.058 1.171-.48 1.338-.943.164-.464.164-.86.114-.943-.049-.084-.182-.133-.38-.232z"/>
                </svg>
                <span>{t('contact_on_whatsapp')}</span>
              </a>
              
              <div className="flex justify-center sm:justify-start mt-4">
                <PWAInstallButton 
                  variant="banner"
                  className="bg-bordeaux-custom hover:bg-[#600018] text-white px-6 py-3 rounded-lg inline-flex items-center justify-center space-x-2 transition-colors shadow-sm hover:shadow-md w-full sm:w-auto"
                />
              </div>
            </div>
          </div>
        </div>

        {/* Copyright */}
        <div className="border-t border-gray-700 mt-8 pt-6 text-center">
          <p className="footer-copyright">Â© {currentYear} {t('laboratory_name')}. {t('rights_reserved')}</p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

```

## FILE: src/components/layout/Header.tsx
```typescript
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { Menu, X, Search, User, Globe, Home, CalendarDays, Truck, FlaskConical, Phone, MessageCircle } from 'lucide-react'; 
import { LAB_WHATSAPP_NUMBER } from '@/constants/contact';
import { useTranslation } from 'react-i18next';
import { useRouter, usePathname } from 'next/navigation';
import { supportedLngs } from '../../../i18n';

function getLangFromPath(path: string) {
  const match = path.match(/^\/([a-zA-Z-]+)/);
  return match ? match[1] : 'fr'; // fallback on 'fr'
}

const Header = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const { t, i18n } = useTranslation('common');
  const router = useRouter();
  const pathname = usePathname();

  const lang = i18n.language || getLangFromPath(pathname);
  // Make sure we're using the language from the URL, not potentially a mismatched language from i18n
  const urlLang = getLangFromPath(pathname);
  // Force i18n language to match the URL language as early as possible
  useEffect(() => {
    if (i18n.language !== urlLang) {
      i18n.changeLanguage(urlLang);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [urlLang]);
  const currentLanguagePath = `/${urlLang}`;
  
  // Debug log to help identify language issues
  console.log(`Header: i18n.language=${lang}, URL language=${urlLang}, pathname=${pathname}`)

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  const handleLanguageChange = () => {
    // CORRECTION: Utiliser la langue de l'URL comme source de vÃ©ritÃ©, pas i18n.language
    const currentLang = urlLang; // Utiliser urlLang au lieu de lang
    const newLocale = currentLang === 'fr' ? 'ar' : 'fr';

    // Extract the path after the language code
    let pathWithoutLang = pathname;
    const langPattern = new RegExp(`^/(${supportedLngs.join('|')})`);
    if (langPattern.test(pathname)) {
      // Remove the language prefix from the path
      pathWithoutLang = pathname.replace(langPattern, '');
      // If the path is empty after removing language code, set it to '/' for homepage
      if (pathWithoutLang === '') pathWithoutLang = '/';
    }

    // Construct a new path with the new language code
    const newPath = pathWithoutLang === '/' 
      ? `/${newLocale}` 
      : `/${newLocale}${pathWithoutLang}`;

    console.log(`CORRECTION MAJEURE - Language switch: URL lang=${currentLang} -> ${newLocale}, Path: ${pathname} -> ${newPath}`);
    
    // CORRECTION CRITIQUE: Au lieu d'utiliser router.push qui fait une navigation cÃ´tÃ© client
    // et ne recharge pas complÃ¨tement le contexte i18n, on utilise window.location.href
    // pour forcer un rechargement complet de la page et rÃ©initialiser le contexte i18n
    window.location.href = newPath;
  };

  return (
    <header className="bg-[#800020] text-white shadow-md">
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16">
          {/* Logo et nom */}
          <div className="flex items-center">
            <Link href={currentLanguagePath} className="flex items-center">
              <div className="bg-white p-1.5 rounded-md mr-2">
                <span className="text-[#800020] font-bold text-lg">L</span>
              </div>
              <h1 className="text-xl font-bold hidden sm:block">
                {t('laboName')}
              </h1>
            </Link>
          </div>

          {/* Navigation desktop */}
          <nav className="hidden md:flex items-center space-x-6">
            <Link href={`${currentLanguagePath}/`} className="hover:text-rose-200 transition-colors">
              {t('home')}
            </Link>

            <Link href={`${currentLanguagePath}/rendez-vous`} className="hover:text-rose-200 transition-colors font-semibold">
              {t('appointment')}
            </Link>
            
            <Link href={`${currentLanguagePath}/glabo`} className="hover:text-rose-200 transition-colors font-semibold">
              {t('glabo')}
            </Link>

            <Link href={`${currentLanguagePath}/analyses`} className="hover:text-rose-200 transition-colors font-semibold">
              {t('navigation.analyses_catalog', { ns: 'common', defaultValue: "Catalogue Analyses" })}
            </Link>

            <Link href={`${currentLanguagePath}/contact`} className="hover:text-rose-200 transition-colors">
              {t('contact')}
            </Link>
          </nav>

          {/* Boutons d'action */}
          <div className="flex items-center space-x-2">
            <button 
              onClick={handleLanguageChange} 
              className="flex items-center text-sm px-3 py-2 min-h-[44px] rounded hover:bg-[#600018] transition-colors"
              aria-label={t('changeLanguage')}
            >
              <Globe size={18} className="mr-1.5" />
              {t('currentLanguage')}
            </button>
            <button className="p-3 rounded-full min-h-[44px] min-w-[44px] hover:bg-[#600018] flex items-center justify-center">
              <Search size={20} />
            </button>
            <button className="p-3 rounded-full min-h-[44px] min-w-[44px] hover:bg-[#600018] flex items-center justify-center">
              <User size={20} />
            </button>
            <button 
              className="md:hidden p-3 rounded-full min-h-[44px] min-w-[44px] hover:bg-[#600018] flex items-center justify-center"
              onClick={toggleMenu}
            >
              <Menu size={24} />
            </button>
          </div>
        </div>
      </div>

      {/* Mobile Menu Overlay and Container */}
      <div 
        className={`fixed inset-0 z-50 md:hidden transition-opacity duration-300 ${
          isMenuOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'
        }`}
        style={{
          transition: isMenuOpen ? 'opacity 0.3s ease-in-out' : 'opacity 0.3s ease-in-out 0.1s'
        }}
      >
        {/* Backdrop with blur effect */}
        <div 
          className="fixed inset-0 bg-black/40 backdrop-blur-sm"
          style={{
            opacity: isMenuOpen ? 1 : 0,
            pointerEvents: isMenuOpen ? 'auto' : 'none',
            transition: 'opacity 0.3s ease-in-out',
            transitionDelay: isMenuOpen ? '0s' : '0.1s'
          }}
          onClick={toggleMenu}
        />
        
        {/* Menu Panel */}
        <div 
          className="fixed top-0 right-0 h-full w-72 bg-white shadow-lg z-50 flex flex-col"
          style={{
            transform: isMenuOpen ? 'translateX(0)' : 'translateX(100%)',
            opacity: isMenuOpen ? 1 : 0.7,
            transition: 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.2s ease-in-out',
            transitionDelay: isMenuOpen ? '0s' : '0s',
            display: 'flex',
            flexDirection: 'column'
          }}
          onClick={(e) => e.stopPropagation()}
        >
          {/* Menu Header Section - Matches main header height */}
          <div className="bg-[#800020] text-white h-16 flex items-center justify-between px-4">
            <div className="flex items-center">
              <Link href={currentLanguagePath} className="flex items-center" onClick={toggleMenu}>
                <span className="bg-white text-[var(--primary-bordeaux)] p-1.5 rounded-md text-lg font-bold mr-3">L</span>
                <span className="font-semibold text-lg">{t('laboName')}</span>
              </Link>
            </div>
            <button 
              onClick={toggleMenu}
              className="p-2 rounded-full hover:bg-white/20 focus:outline-none focus:ring-2 focus:ring-white/50"
              aria-label={t('close_menu')}
            >
              <X size={24} className="text-white" />
            </button>
          </div>
            
          <nav className="flex flex-col flex-grow p-4 space-y-2 overflow-y-auto bg-white">
            <Link 
              href={`${currentLanguagePath}/`} 
              className="flex items-center py-2.5 px-3 rounded-md transition-colors font-medium group text-slate-700 hover:bg-[var(--fuchsia-pale)] hover:text-[var(--accent-fuchsia)] focus:bg-[var(--fuchsia-pale)] focus:text-[var(--accent-fuchsia)] focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-[var(--accent-fuchsia)]"
              onClick={toggleMenu}
            >
              <Home size={20} className="mr-3 text-slate-500 group-hover:text-[var(--accent-fuchsia)] transition-colors" />
              {t('home')}
            </Link>

            <Link 
              href={`${currentLanguagePath}/rendez-vous`} 
              className="flex items-center py-2.5 px-3 rounded-md transition-colors font-medium group text-slate-700 hover:bg-[var(--fuchsia-pale)] hover:text-[var(--accent-fuchsia)] focus:bg-[var(--fuchsia-pale)] focus:text-[var(--accent-fuchsia)] focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-[var(--accent-fuchsia)]"
              onClick={toggleMenu}
            >
              <CalendarDays size={20} className="mr-3 text-slate-500 group-hover:text-[var(--accent-fuchsia)] transition-colors" />
              {t('appointment')}
            </Link>
            
            <Link 
              href={`${currentLanguagePath}/glabo`} 
              className="flex items-center py-2.5 px-3 rounded-md transition-colors font-medium group text-slate-700 hover:bg-[var(--fuchsia-pale)] hover:text-[var(--accent-fuchsia)] focus:bg-[var(--fuchsia-pale)] focus:text-[var(--accent-fuchsia)] focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-[var(--accent-fuchsia)]"
              onClick={toggleMenu}
            >
              <Truck size={20} className="mr-3 text-slate-500 group-hover:text-[var(--accent-fuchsia)] transition-colors" />
              {t('glabo')}
            </Link>

            <Link 
              href={`${currentLanguagePath}/analyses`} 
              className="flex items-center py-2.5 px-3 rounded-md transition-colors font-medium group text-slate-700 hover:bg-[var(--fuchsia-pale)] hover:text-[var(--accent-fuchsia)] focus:bg-[var(--fuchsia-pale)] focus:text-[var(--accent-fuchsia)] focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-[var(--accent-fuchsia)]"
              onClick={toggleMenu}
            >
              <FlaskConical size={20} className="mr-3 text-slate-500 group-hover:text-[var(--accent-fuchsia)] transition-colors" />
              {t('navigation.analyses_catalog', { ns: 'common', defaultValue: "Catalogue Analyses" })}
            </Link>

            <Link 
              href={`${currentLanguagePath}/contact`} 
              className="flex items-center py-2.5 px-3 rounded-md transition-colors font-medium group text-slate-700 hover:bg-[var(--fuchsia-pale)] hover:text-[var(--accent-fuchsia)] focus:bg-[var(--fuchsia-pale)] focus:text-[var(--accent-fuchsia)] focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-[var(--accent-fuchsia)]"
              onClick={toggleMenu}
            >
              <Phone size={20} className="mr-3 text-slate-500 group-hover:text-[var(--accent-fuchsia)] transition-colors" />
              {t('contact')}
            </Link>
          </nav>
            
          {/* Footer with WhatsApp button and language switcher */}
          <div className="p-4 border-t border-gray-200 bg-white">
            {/* WhatsApp Contact Button */}
            <a 
              href={`https://wa.me/${LAB_WHATSAPP_NUMBER}`}
              target="_blank"
              rel="noopener noreferrer"
              onClick={toggleMenu}
              className="w-full flex items-center justify-center text-sm px-3 py-2.5 rounded-md transition-colors mb-3 bg-green-600 text-white hover:bg-green-700 focus:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-green-700"
              aria-label="Contact via WhatsApp"
            >
              <MessageCircle size={18} className="mr-2" />
              {t('contact')} WhatsApp
            </a>
            
            {/* Language Switcher Button */}
            <button 
              onClick={() => {
                handleLanguageChange();
                toggleMenu();
              }} 
              className="w-full flex items-center justify-center text-sm px-3 py-2.5 rounded-md transition-colors bg-white border border-gray-300 text-gray-700 hover:bg-gray-100 focus:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-[var(--accent-fuchsia)]"
              aria-label={t('changeLanguage')}
            >
              <Globe size={18} className="mr-2" />
              {t('currentLanguage')}
            </button>
          </div>
        </div>
      </div>
    </header>
  );
};

export default Header;
```

## FILE: src/components/layout/MainLayout.tsx
```typescript
import React, { ReactNode } from 'react';
import Head from 'next/head';

interface MainLayoutProps {
  children: ReactNode;
  title?: string;
}

const MainLayout: React.FC<MainLayoutProps> = ({ 
  children, 
  title = 'Laboratoire El Allali'
}) => {
  return (
    <>
      <Head>
        <title>{title}</title>
        <meta name="description" content="Application du Laboratoire El Allali pour les rÃ©sultats d'analyses et rendez-vous" />
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
        <link rel="manifest" href="/manifest.json" />
        <meta name="theme-color" content="#800020" />
      </Head>
      <div className="min-h-screen bg-gray-50">
        {/* Header will go here */}
        <main className="container mx-auto px-4 py-8">
          {children}
        </main>
        {/* Footer will go here */}
      </div>
    </>
  );
};

export default MainLayout;
```

## FILE:  (NOT FOUND)

## FILE: src/components/providers/TranslationsProvider.tsx
```typescript
// src/components/providers/TranslationsProvider.tsx
'use client';

import { useEffect, useRef } from 'react';
import { I18nextProvider, initReactI18next } from 'react-i18next';
import i18next, { createInstance } from 'i18next';
import resourcesToBackend from 'i18next-resources-to-backend';

// We're using any here because the exact i18next resource structure is complex
// and attempting to type it precisely is causing TypeScript errors
/* eslint-disable @typescript-eslint/no-explicit-any */
type I18NextResources = any;

interface TranslationsProviderProps {
  children: React.ReactNode;
  locale: string;
  namespaces: string[];
  resources: I18NextResources;
}

// CrÃ©e une nouvelle instance i18n pour chaque rendu afin d'Ã©viter
// les fuites d'Ã©tat entre les requÃªtes cÃ´tÃ© serveur et d'Ã©liminer
// les dÃ©calages d'hydratation.
function createI18nInstance(locale: string, namespaces: string[], resources: I18NextResources) {
  const instance = createInstance();
  instance
    .use(initReactI18next)
    .use(
      // Charger les namespaces manquants depuis /public/locales au besoin
      resourcesToBackend((language: string, namespace: string) =>
        fetch(`/locales/${language}/${namespace}.json`).then((res) => res.json())
      )
    )
    .init({
      lng: locale,
      ns: namespaces,
      resources,
      fallbackLng: 'fr',
      defaultNS: 'common',
      interpolation: { escapeValue: false },
      react: { useSuspense: false },
    });
  return instance;
}

export default function TranslationsProvider({
  children,
  locale,
  namespaces,
  resources,
}: TranslationsProviderProps) {
  // Conserver l'instance pour la session du composant
  const i18nRef = useRef(createI18nInstance(locale, namespaces, resources));

  useEffect(() => {
    // CORRECTION: Pour Ã©viter les erreurs d'hydratation, toujours mettre Ã  jour 
    // la langue cÃ´tÃ© client immÃ©diatement aprÃ¨s le premier rendu
    const updateLanguage = async () => {
      if (i18nRef.current.language !== locale) {
        console.log(`[TranslationsProvider] Changing language from ${i18nRef.current.language} to ${locale}`);
        await i18nRef.current.changeLanguage(locale);
      }
      
      // Add new resource bundles if needed
      if (resources && resources[locale]) {
        Object.keys(resources[locale]).forEach(ns => {
          if (!i18nRef.current.hasResourceBundle(locale, ns)) {
            console.log(`[TranslationsProvider] Adding resource bundle for ${locale}/${ns}`);
            i18nRef.current.addResourceBundle(locale, ns, resources[locale][ns], true, true);
          }
        });
      }
    };
    
    updateLanguage();
  }, [locale, resources]);

  return <I18nextProvider i18n={i18nRef.current}>{children}</I18nextProvider>;
}
```

## FILE:  (NOT FOUND)

## FILE: src/components/features/catalog/AnalysisCard.tsx
```typescript
import React, { useState } from "react";

// Define Analysis interface for type safety
export interface Analysis {
  id: string;
  name_fr: string;
  name_ar: string;
  price: number;
  category_fr: string;
  category_ar: string;
  preparation_fr: string;
  preparation_ar: string;
  delay_fr: string;
  delay_ar: string;
  is_active: boolean;
}

/**
 * Props for the AnalysisCard component
 * @interface AnalysisCardProps
 * @property {Analysis} analysis - The analysis data to display
 * @property {string} lang - The current language code ('fr' or 'ar')
 * @property {boolean} [isSelected] - Whether this analysis is currently selected
 * @property {Function} [onSelect] - Callback function when the analysis is selected/deselected
 */
interface AnalysisCardProps {
  analysis: Analysis;
  lang: string;
  isSelected?: boolean;
  onSelect?: (analysis: Analysis) => void;
}

export function AnalysisCard({ analysis, lang, isSelected = false, onSelect }: AnalysisCardProps) {
  // Define animation keyframes for the check icon - client side only
  React.useEffect(() => {
    if (typeof document !== 'undefined') {
      const style = document.createElement('style');
      style.innerHTML = `
        @keyframes appearAnimation {
          0% { opacity: 0; transform: scale(0); }
          50% { opacity: 1; transform: scale(1.2); }
          100% { opacity: 1; transform: scale(1); }
        }
        .animate-appear {
          animation: appearAnimation 0.3s ease-out forwards;
        }
      `;
      document.head.appendChild(style);

      return () => {
        document.head.removeChild(style);
      };
    }
  }, []);
  const isArabic = lang === "ar";
  const [showPreparation, setShowPreparation] = useState(false);
  
  // Get the preparation text based on the current language
  const preparationText = isArabic ? analysis.preparation_ar : analysis.preparation_fr;
  const hasPreparation = preparationText && preparationText.trim().length > 0;
  
  // Toggle preparation visibility
  const togglePreparation = () => {
    setShowPreparation(prev => !prev);
  };
  
  // Manual translations based on language
  const translations = {
    categoryLabel: isArabic ? "Ø§Ù„ØªØµÙ†ÙŠÙ:" : "CatÃ©gorie:",
    delayLabel: isArabic ? "Ø§Ù„Ù…Ø¯Ø©:" : "DÃ©lai:",
    priceCurrency: isArabic ? "Ø¯Ø±Ù‡Ù…" : "MAD",
    showPreparation: isArabic ? "Ø¹Ø±Ø¶ Ø§Ù„ØªØ­Ø¶ÙŠØ±" : "Voir PrÃ©paration",
    hidePreparation: isArabic ? "Ø¥Ø®ÙØ§Ø¡ Ø§Ù„ØªØ­Ø¶ÙŠØ±" : "Masquer PrÃ©paration",
    preparationLabel: isArabic ? "ØªØ¹Ù„ÙŠÙ…Ø§Øª Ø§Ù„ØªØ­Ø¶ÙŠØ±:" : "Instructions de prÃ©paration:",
    noPreparation: isArabic ? "Ù„Ø§ ØªÙˆØ¬Ø¯ ØªØ¹Ù„ÙŠÙ…Ø§Øª ØªØ­Ø¶ÙŠØ± Ù…Ø­Ø¯Ø¯Ø©." : "Aucune prÃ©paration spÃ©cifique.",
    select: isArabic ? "Ø§Ø®ØªÙŠØ§Ø±" : "SÃ©lectionner",
    selected: isArabic ? "ØªÙ… Ø§Ù„Ø§Ø®ØªÙŠØ§Ø±" : "SÃ©lectionnÃ©"
  };
  
  // Handle selection
  const handleSelectClick = (e: React.MouseEvent) => {
    e.stopPropagation(); // Prevent event bubbling
    if (onSelect) {
      onSelect(analysis);
    }
  };

  return (
    <div 
      className={`shadow-lg rounded-lg p-4 mb-4 border 
        ${isSelected 
          ? 'border-[var(--accent-fuchsia)] border border-opacity-80 bg-[var(--bordeaux-pale)] ring-1 ring-[var(--accent-fuchsia)] ring-opacity-40' 
          : 'border-gray-200 bg-white hover:border-gray-300'} 
        hover:shadow-xl transition-all duration-300 ease-in-out transform ${isSelected ? 'scale-[1.01]' : ''} relative`}
      onClick={handleSelectClick}
      role="button"
      tabIndex={0}
      aria-pressed={isSelected}
      onKeyDown={(e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          handleSelectClick(e as unknown as React.MouseEvent);
        }
      }}
    >
      {/* Selection indicator - position based on language direction */}
      <div 
        className={`absolute top-3 ${isArabic ? 'left-3' : 'right-3'} flex items-center z-10`}
        aria-hidden="true"
      >
        <div 
          className={`w-6 h-6 rounded-full 
            ${isSelected 
              ? 'bg-[var(--accent-fuchsia)] shadow-md' 
              : 'border-2 border-gray-300 bg-white hover:border-[var(--accent-fuchsia)] hover:border-opacity-50'} 
            flex items-center justify-center transform transition-all duration-300 ease-in-out 
            ${isSelected ? 'scale-110 rotate-3' : ''}`}
        >
          {isSelected ? (
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-white animate-appear" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round">
              <polyline points="20 6 9 17 4 12" />
            </svg>
          ) : (
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-gray-400 opacity-70" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <line x1="12" y1="5" x2="12" y2="19" />
              <line x1="5" y1="12" x2="19" y2="12" />
            </svg>
          )}
        </div>
        <span className="sr-only">{isSelected ? translations.selected : translations.select}</span>
      </div>
      
      <h3 className={`text-xl font-semibold mb-2 ${isSelected ? 'text-[var(--accent-fuchsia)]' : 'text-[var(--primary-bordeaux)]'} ${isArabic ? 'pl-8' : 'pr-8'} transition-colors duration-300`}>
        {isArabic ? analysis.name_ar : analysis.name_fr}
      </h3>
      
      <div className="mt-2 space-y-1">
        <p className="text-gray-600">
          <span className="font-medium">{translations.categoryLabel} </span>
          {isArabic ? analysis.category_ar : analysis.category_fr}
        </p>
        
        <p className="text-gray-600">
          <span className="font-medium">{translations.delayLabel} </span>
          {isArabic ? analysis.delay_ar : analysis.delay_fr}
        </p>
        
        <p className="text-[var(--accent-fuchsia)] font-bold mt-2">
          {analysis.price.toLocaleString(isArabic ? 'ar-MA' : 'fr-MA')} {translations.priceCurrency}
        </p>
        
        {/* Preparation toggle button - only show if the analysis has preparation instructions */}
        {hasPreparation && (
          <div className="mt-3">
            <button 
              onClick={togglePreparation}
              className="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 text-gray-700 rounded transition-colors duration-200"
              aria-expanded={showPreparation}
            >
              {showPreparation 
                ? translations.hidePreparation
                : translations.showPreparation
              }
            </button>
          </div>
        )}
        
        {/* Preparation details section - conditionally rendered */}
        {showPreparation && (
          <div className="mt-3 p-3 bg-gray-50 border border-gray-200 rounded-md">
            <h4 className="font-medium text-sm mb-1 text-gray-700">
              {translations.preparationLabel}
            </h4>
            <p className="text-gray-700 text-sm whitespace-pre-line">
              {hasPreparation 
                ? preparationText 
                : translations.noPreparation
              }
            </p>
          </div>
        )}
      </div>
    </div>
  );
}

export default AnalysisCard;

```

## FILE: src/components/features/home/HeroBanner.tsx
```typescript
import React from 'react';
import { Navigation } from 'lucide-react';
import dynamic from 'next/dynamic';
// Import useTranslation hook without type issues
import { useTranslation as useTranslationOriginal } from 'react-i18next';

// Create a wrapper to avoid TypeScript errors
const useTranslation = (ns: string) => {
  return useTranslationOriginal(ns);
};

// Import the PWA install button component with SSR disabled
const InstallButton = dynamic<{ className?: string }>(
  () => import('@/components/features/pwa/InstallButton').then(mod => mod.default),
  { 
    ssr: false,
    loading: () => <div className="w-full h-12"></div> // Keep the layout stable while loading
  }
);

const HeroBanner = () => {
  // Use a simpler approach without type assertions
  const { t } = useTranslation('common');
  return (
    <div className="relative overflow-hidden mb-8 -mt-[1px] w-full">
      {/* Banner Image */}
      <div className="absolute inset-0 z-0">
        {/* eslint-disable-next-line @next/next/no-img-element */}
        <img
          src="/images/hero-banner.jpg"
          alt={t('banner_alt')}
          className="object-cover w-full h-full"
          style={{ position: 'absolute', inset: 0 }}
        />
        {/* Overlay to ensure text is readable */}
        <div className="absolute inset-0 bg-[#800020] opacity-60"></div>
      </div>
      
      {/* Content */}
      <div className="container mx-auto px-4 py-16 sm:py-20 md:py-32 relative z-10">
        <div className="max-w-2xl">
          <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold mb-4 break-words text-white">
            {t('welcome_banner')}
          </h1>
          <p className="text-base sm:text-lg md:text-xl mb-8 opacity-90 break-words text-white">
            {t('welcome_description')}
          </p>
          <div className="flex flex-col sm:flex-row flex-wrap gap-4 w-full">
            <a
              href="tel:0528843384"
              className="flex items-center justify-center min-w-[170px] h-12 px-6 bg-white text-[var(--accent-fuchsia)] font-semibold rounded-lg shadow transition-colors text-center text-lg hover:bg-[#fff] hover:text-[#F50057] focus:bg-[#fff] focus:text-[#F50057] gap-2 w-full sm:w-auto"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" fill="none" viewBox="0 0 24 24" stroke="currentColor" className="mr-2 -ml-1"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h2.28a2 2 0 011.94 1.515l.3 1.2a2 2 0 01-.45 1.95l-1.27 1.27a16.001 16.001 0 006.586 6.586l1.27-1.27a2 2 0 011.95-.45l1.2.3A2 2 0 0121 16.72V19a2 2 0 01-2 2h-1C9.163 21 3 14.837 3 7V5z" /></svg>
              {t('call_us')}
            </a>
            <a
              href="https://www.google.com/maps/dir/?api=1&destination=61+Bis+Rue+de+Marrakech+80020+Agadir"
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center justify-center min-w-[220px] h-12 px-6 bg-white text-[var(--accent-fuchsia)] font-semibold rounded-lg shadow transition-colors text-center text-lg hover:bg-[#fff] hover:text-[#F50057] focus:bg-[#fff] focus:text-[#F50057] gap-2 w-full sm:w-auto"
            >
              <Navigation size={22} className="mr-2 -ml-1" />
              {t('navigate_to_lab')}
            </a>
            <InstallButton 
              className="w-full h-12 bg-white text-[var(--accent-fuchsia)] hover:bg-gray-100 font-semibold rounded-lg shadow transition-colors text-center text-lg"
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default HeroBanner;
```

## FILE: src/components/features/pwa/InstallButton.tsx
```typescript
'use client';

import { useState, useEffect } from 'react';
import { Download } from 'lucide-react';
import { useTranslation } from 'react-i18next';

// Define the BeforeInstallPromptEvent interface
declare global {
  interface WindowEventMap {
    beforeinstallprompt: BeforeInstallPromptEvent;
  }
  
  interface Window {
    deferredPrompt: BeforeInstallPromptEvent | null;
  }
}

interface BeforeInstallPromptEvent extends Event {
  readonly platforms: string[];
  readonly userChoice: Promise<{
    outcome: 'accepted' | 'dismissed';
    platform: string;
  }>;
  prompt(): Promise<void>;
}

type InstallButtonProps = {
  className?: string;
};

export default function InstallButton({ className = '' }: InstallButtonProps) {
  const [showButton, setShowButton] = useState(false);
  const { t } = useTranslation('common');

  // Check if the app is already installed and set up event listeners
  useEffect(() => {
    if (typeof window === 'undefined') return;

    // Check if the app is already installed
    if (window.matchMedia('(display-mode: standalone)').matches) {
      console.log('PWA: App is already installed');
      return;
    }
    
    // Initialize deferredPrompt
    window.deferredPrompt = null;
    
    const handleBeforeInstallPrompt = (e: Event) => {
      e.preventDefault();
      console.log('PWA: beforeinstallprompt event fired');
      
      // Store the event for later use
      window.deferredPrompt = e as unknown as BeforeInstallPromptEvent;
      setShowButton(true);
    };
    
    const handleAppInstalled = () => {
      console.log('PWA: App installed');
      setShowButton(false);
      window.deferredPrompt = null;
    };

    // Add event listeners
    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    window.addEventListener('appinstalled', handleAppInstalled);

    // Clean up
    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
      window.removeEventListener('appinstalled', handleAppInstalled);
    };
  }, []);

  // Handle install button click
  const handleClick = async () => {
    if (!window.deferredPrompt) {
      console.log('PWA: No install prompt available');
      return;
    }
    
    try {
      // Show the install prompt
      console.log('PWA: Showing install prompt');
      await window.deferredPrompt.prompt();
      
      // Wait for the user to respond to the prompt
      const choiceResult = await window.deferredPrompt.userChoice;
      console.log(`PWA: User choice: ${choiceResult.outcome}`);
      
      if (choiceResult.outcome === 'accepted') {
        console.log('PWA: User accepted the install prompt');
        setShowButton(false);
      }
    } catch (error) {
      console.error('PWA: Error showing install prompt:', error);
    } finally {
      // Reset the deferred prompt variable as it can only be used once
      window.deferredPrompt = null;
    }
  };

  if (!showButton) {
    return null;
  }

  return (
    <button
      onClick={handleClick}
      className={`w-full h-12 bg-white text-[var(--accent-fuchsia)] hover:bg-gray-100 font-semibold rounded-lg shadow transition-colors text-center text-lg flex items-center justify-center gap-2 ${className}`}
      aria-label={t('pwa.install_app_button')}
    >
      <Download size={18} />
      {t('pwa.install_app_button')}
    </button>
  );
}

```

## FILE: src/components/features/pwa/IOSInstallBanner.tsx
```typescript
// src/components/features/pwa/IOSInstallBanner.tsx
'use client';
import { X } from 'lucide-react';
import { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';

const IOSInstallBanner = () => {
  const [showBanner, setShowBanner] = useState(false);
  const { t } = useTranslation('common');

  useEffect(() => {
    const isIOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream;
    // VÃ©rifie aussi si l'app n'est PAS dÃ©jÃ  en mode standalone (installÃ©e)
    const isInStandaloneMode = typeof navigator !== 'undefined' && 'standalone' in navigator && (navigator as any).standalone;
    
    if (isIOS && !isInStandaloneMode && !localStorage.getItem('iosInstallBannerDismissed')) {
      setShowBanner(true);
      console.log('>>> PWA: iOS device detected, not in standalone, banner not dismissed. Showing banner.');
    } else {
      console.log('>>> PWA: iOS banner conditions not met or already dismissed.');
    }
  }, []);

  const dismissBanner = () => {
    localStorage.setItem('iosInstallBannerDismissed', 'true');
    setShowBanner(false);
    console.log('>>> PWA: iOS install banner dismissed.');
  };

  if (!showBanner) return null;

  return (
    <div className="fixed bottom-0 left-0 right-0 bg-[var(--primary-bordeaux)] text-white p-3 text-center text-sm z-[1000] shadow-lg flex items-center justify-between sm:justify-center">
      <span className="flex-grow sm:flex-grow-0 text-left sm:text-center">
        {t('pwa.ios_install_prompt_part1', "Pour un accÃ¨s facile, ajoutez-nous Ã  l'Ã©cran d'accueil :")}
        <br className="sm:hidden"/> {/* Saut de ligne pour mobile */}
        {t('pwa.ios_install_prompt_part2', "Appuyez sur")} <img src="/images/icons/ios-share-icon.png" alt={t('pwa.ios_share_alt', "l'icÃ´ne Partager")} className="inline h-4 w-4 mx-1" /> {t('pwa.ios_install_prompt_part3', "puis 'Sur l'Ã©cran d'accueil'.")}
      </span>
      <button 
        onClick={dismissBanner} 
        className="ml-2 p-1 text-white hover:bg-white/20 rounded-full flex-shrink-0"
        aria-label={t('pwa.dismiss_banner_aria', "Fermer le bandeau d'installation")}
      >
        <X size={20} />
      </button>
    </div>
  );
};

export default IOSInstallBanner;

```

## FILE: src/components/features/pwa/PWABanner.tsx
```typescript
'use client';

import { useState, useEffect, useCallback } from 'react';
import { Download } from 'lucide-react';
import { useTranslation } from 'react-i18next';

// Extend Window interface to include deferredPrompt
interface BeforeInstallPromptEvent extends Event {
  readonly platforms: string[];
  readonly userChoice: Promise<{
    outcome: 'accepted' | 'dismissed';
    platform: string;
  }>;
  prompt(): Promise<void>;
}

declare global {
  interface WindowEventMap {
    beforeinstallprompt: BeforeInstallPromptEvent;
  }
  
  interface Window {
    deferredPrompt: BeforeInstallPromptEvent | null;
  }
}

type PWABannerProps = {
  className?: string;
};

export default function PWABanner({ className = '' }: PWABannerProps) {
  const [showBanner, setShowBanner] = useState(false);
  const [isInstalled, setIsInstalled] = useState(false);
  const { t } = useTranslation('common');

  // Check if the app is already installed
  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    
    if (isStandalone || (isIOS && !isSafari)) {
      setIsInstalled(true);
      setShowBanner(false);
    }
  }, []);

  // Set up event listeners for beforeinstallprompt
  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    const handleBeforeInstallPrompt = (e: Event) => {
      e.preventDefault();
      
      // Store the event for later use
      const event = e as unknown as { prompt: () => Promise<{ outcome: string }> };
      if (event.prompt && typeof event.prompt === 'function') {
        window.deferredPrompt = {
          prompt: () => event.prompt(),
          userChoice: Promise.resolve({ outcome: 'dismissed' })
        } as PWAPrompt;
        setShowBanner(true);
      }
    };

    const handleAppInstalled = () => {
      setIsInstalled(true);
      setShowBanner(false);
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    window.addEventListener('appinstalled', handleAppInstalled);

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
      window.removeEventListener('appinstalled', handleAppInstalled);
    };
  }, []);

  // Handle install button click
  const handleInstallClick = useCallback(async () => {
    if (!window.deferredPrompt) return;
    
    try {
      await window.deferredPrompt.prompt();
      const { outcome } = await window.deferredPrompt.userChoice;
      
      if (outcome === 'accepted') {
        setIsInstalled(true);
        setShowBanner(false);
      }
      
      window.deferredPrompt = null;
    } catch (error) {
      console.error('Error showing install prompt:', error);
    }
  }, []);

  if (isInstalled || !showBanner) {
    return null;
  }
  
  return (
    <div className="fixed bottom-4 right-4 left-4 sm:left-auto bg-bordeaux-custom text-white p-4 rounded-lg shadow-xl z-[999] flex items-center justify-between">
      <div className="flex items-center">
        <div className="flex-shrink-0 mr-3">
          <Download size={20} className="text-white" />
        </div>
        <div>
          <p className="font-medium">{t('pwa.install_app_title')}</p>
          <p className="text-sm opacity-90">{t('pwa.install_hint')}</p>
        </div>
      </div>
      <button
        onClick={handleInstallClick}
        className="ml-4 px-4 py-2 bg-white text-bordeaux-custom font-medium rounded-md hover:bg-gray-100 transition-colors whitespace-nowrap"
      >
        {t('pwa.install_button')}
      </button>
    </div>
  );
}

```

## FILE:  (NOT FOUND)

## FILE: functions/src/index.ts
```typescript
/**
 * Import function triggers from their respective submodules:
 *
 * import {onCall} from "firebase-functions/v2/https";
 * import {onDocumentWritten} from "firebase-functions/v2/firestore";
 *
 * See a full list of supported triggers at https://firebase.google.com/docs/functions
 */

import { onRequest } from "firebase-functions/v2/https";
import { onDocumentCreated } from "firebase-functions/v2/firestore";
import { defineString } from "firebase-functions/params";
import * as logger from "firebase-functions/logger";
import * as admin from "firebase-admin";
import next from "next";

// For SendGrid email functionality
import * as sgMail from "@sendgrid/mail";
import { getStorage } from "firebase-admin/storage";
import { FieldValue } from "firebase-admin/firestore";

// Initialize Firebase Admin SDK
if (admin.apps.length === 0) {
  admin.initializeApp();
}

// Define environment parameters for SendGrid
const sendgridApiKey = defineString("sendgrid.key");
const sendgridSenderEmail = defineString("sendgrid.sender");
const labEmailAddress = defineString("lab.email");

const isDev = process.env.NODE_ENV !== "production";

// Prepare the Next.js server instance
const nextApp = next({
  dev: isDev,
  dir: "." // Next.js looks for .next, package.json, public in the current dir (/workspace)
});

const nextRequestHandler = nextApp.getRequestHandler();

// Define the Cloud Function
export const nextServer = onRequest(
  {
    // Set region and memory for Next.js applications
    // Adjust these based on your needs and Firebase plan
    region: "europe-southwest1", // Example: Change to your preferred region (e.g., europe-west1)
    memory: "1GiB",      // Example: Adjust memory (e.g., 512MiB, 2GiB)
  },
  (req, res) => {
    logger.info(`Received request for path: ${req.path}`, { structuredData: true });
    // Ensure the Next.js server is prepared before handling requests
    return nextApp.prepare()
      .then(() => {
        logger.info("Next.js server prepared, handling request.", { structuredData: true });
        return nextRequestHandler(req, res);
      })
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      .catch((err: any) => { // Add :any to err to access properties like message/stack more easily
        logger.error("Next.js PREPARE/HANDLER FAILED.", {
          errorMessage: err.message, // Log the error message
          errorStack: err.stack,     // Log the stack trace
          errorObject: JSON.stringify(err, Object.getOwnPropertyNames(err)), // Try to stringify the whole error
          structuredData: true
        });
        res.status(500).send("Internal Server Error handling Next.js request.");
      });
  }
);

/**
 * Cloud Function triggered when a new appointment request is created in Firestore
 * Sends an email notification with the appointment details to the laboratory
 */
export const sendAppointmentRequestEmail = onDocumentCreated(
  {
    document: "appointmentRequests/{docId}",
    region: "europe-southwest1",
    memory: "512MiB",
  },
  async (event) => {
    // Exit if no data exists
    if (!event.data) {
      logger.error("No document data found");
      return;
    }

    try {
      // Extract appointment data
      const appointmentData = event.data.data();
      const appointmentId = event.data.id;
      logger.info(`Processing new appointment request: ${appointmentId}`, { structuredData: true });

      // Set up SendGrid with the API key from environment variables
      sgMail.setApiKey(sendgridApiKey.value());

      let attachments = [];
      let prescriptionNote = "Le patient n'a pas d'ordonnance.";

      // Handle prescription file if it exists
      if (appointmentData.prescriptionImageUrl) {
        try {
          const storage = getStorage();
          const fileUrl = appointmentData.prescriptionImageUrl;
          const bucket = storage.bucket();
          
          // Extract filename from the URL
          const urlParts = fileUrl.split('/');
          const fileName = urlParts[urlParts.length - 1].split('?')[0];
          
          // Create a reference to the file
          const fileRef = bucket.file(`ordonnances/${fileName}`);
          
          // Get file data
          const [fileContents] = await fileRef.download();
          
          // Prepare attachment for SendGrid
          const attachment = {
            content: fileContents.toString('base64'),
            filename: fileName,
            type: appointmentData.prescriptionImageUrl.includes('.pdf') ? 'application/pdf' : 'image/jpeg',
            disposition: 'attachment'
          };
          
          attachments.push(attachment);
          prescriptionNote = "L'ordonnance du patient est jointe Ã  ce email.";
        } catch (error) {
          logger.error("Error downloading prescription file:", error);
          prescriptionNote = `Le patient a tÃ©lÃ©chargÃ© une ordonnance, mais nous n'avons pas pu la tÃ©lÃ©charger. Vous pouvez l'accÃ©der via ce lien: ${appointmentData.prescriptionImageUrl}`;
        }
      }

      // Format email body
      const emailHtml = `
        <h2>Nouvelle demande de rendez-vous</h2>
        <p><strong>Date de la demande:</strong> ${new Date().toLocaleString('fr-FR', { timeZone: 'Europe/Paris' })}</p>
        <p><strong>Nom du patient:</strong> ${appointmentData.name}</p>
        <p><strong>NumÃ©ro de tÃ©lÃ©phone:</strong> ${appointmentData.phone}</p>
        ${appointmentData.email ? `<p><strong>Email:</strong> ${appointmentData.email}</p>` : ''}
        <p><strong>Date souhaitÃ©e:</strong> ${appointmentData.desiredDate}</p>
        <p><strong>Heure souhaitÃ©e:</strong> ${appointmentData.desiredTime}</p>
        ${appointmentData.comments ? `<p><strong>Commentaires:</strong> ${appointmentData.comments}</p>` : ''}
        <p><strong>Ordonnance:</strong> ${prescriptionNote}</p>
        <p><em>Cette demande a Ã©tÃ© soumise via le site web du laboratoire.</em></p>
      `;

      // Prepare email message
      const msg = {
        to: labEmailAddress.value(),
        from: sendgridSenderEmail.value(),
        subject: `Nouvelle demande de RDV: ${appointmentData.name} - ${appointmentData.desiredDate}`,
        html: emailHtml,
        attachments: attachments
      };

      // Send the email
      await sgMail.send(msg);
      logger.info(`Email notification sent for appointment request: ${appointmentId}`, { structuredData: true });

      // Update document status
      const db = admin.firestore();
      await db.collection("appointmentRequests").doc(appointmentId).update({
        status: "email_sent_to_lab",
        emailSentAt: FieldValue.serverTimestamp()
      });

    } catch (error) {
      logger.error("Error sending appointment notification email:", error);

      // Update document status to indicate failure
      if (event.data && event.data.id) {
        try {
          const db = admin.firestore();
          await db.collection("appointmentRequests").doc(event.data.id).update({
            status: "email_failed",
            emailErrorAt: FieldValue.serverTimestamp(),
            emailErrorMessage: error.message || "Unknown error"
          });
        } catch (updateError) {
          logger.error("Error updating appointment status after email failure:", updateError);
        }
      }
    }
  }
);

```

## FILE: functions/package.json
```json
{
  "name": "laboelallali",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "deploy": "next build && firebase deploy",
    "deploy:hosting": "next build && firebase deploy --only hosting",
    "deploy:functions": "firebase deploy --only functions",
    "context": "powershell -ExecutionPolicy Bypass -NoProfile -File ./generate_context.ps1",
    "tailwind:build": "tailwindcss -i ./src/app/globals.css -o ./output.css --content \"./src/**/*.{js,ts,jsx,tsx,mdx}\"",
    "git": "git add . && git commit -m \"update\" && git push"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.2",
    "@hookform/resolvers": "^5.0.1",
    "@sendgrid/mail": "^8.1.5",
    "accept-language": "^3.0.20",
    "date-fns": "^4.1.0",
    "firebase": "^11.6.1",
    "firebase-admin": "^13.3.0",
    "firebase-functions": "^6.3.2",
    "i18next": "^25.1.2",
    "i18next-resources-to-backend": "^1.2.1",
    "leaflet": "^1.9.4",
    "lucide-react": "^0.507.0",
    "next": "15.3.1",
    "next-i18next": "^15.4.2",
    "next-pwa": "^5.6.0",
    "react": "^19.0.0",
    "react-datepicker": "^8.3.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.56.2",
    "react-i18next": "^15.5.1",
    "react-leaflet": "^5.0.0",
    "yup": "^1.6.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4.1.5",
    "@types/leaflet": "^1.9.17",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.21",
    "eslint": "^9",
    "eslint-config-next": "15.3.1",
    "postcss": "^8.5.3",
    "tailwindcss": "^4.1.5",
    "typescript": "^5"
  }
}

```

## --- END OF CONTEXT ---

## Total files included: 30
